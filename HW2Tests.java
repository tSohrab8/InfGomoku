// CHANGELOG: 
// 256 tests (initial release)

/* To run them on the command line, make sure that the junit-310.jar
   is in the project directory.
 
   demo$ javac -cp .:junit-cs310.jar *.java     # compile everything
   demo$ java  -cp .:junit-cs310.jar HW2Tests   # run tests
 
   On Windows replace : with ; (colon with semicolon)
   demo$ javac -cp .;junit-cs310.jar *.java     # compile everything
   demo$ java  -cp .;junit-cs310.jar HW2Tests   # run tests
*/

import org.junit.*;
import org.junit.Test; // fixes some compile problems with annotations
import static org.junit.Assert.*;
import java.util.*;
import java.io.*;

public class HW2Tests {
  public static void main(String args[]){
    org.junit.runner.JUnitCore.main("HW2Tests");
  }

  ////////////////////////////////////////////////////////////////////////////////
  // Additive List Utilities
  ////////////////////////////////////////////////////////////////////////////////

  // Utilityt to generate a string from the list by iterating from
  // end to beginning
  public<T> String reverseString(AdditiveList<T> l){
    ListIterator<T> iter = l.listIterator(l.size());
    StringBuilder sb = new StringBuilder();
    sb.append("]");
    while(iter.hasPrevious()){
      T x = iter.previous();
      if(!iter.hasPrevious()){ // First element
        sb.insert(0,x.toString());
      }
      else{                   // Middle element
        sb.insert(0,", "+x.toString());
      }
    }
    sb.insert(0,"[");
    return sb.toString();
  }

  @SuppressWarnings("unchecked")
  // Utility to check a list of integers has been correctly
  // modified. Checks using string comparison of the list to the
  // expected string, checks strings generated by both forward and
  // backwards traversals of the list
  public<T> void checkList(String expectS, Object changes[][], AdditiveList<T> list){
    String actualFwd = list.toString();
    String actualRev = reverseString(list);
    String msg = 
      "Forward or Reverse string of list does not match expected\n"+
      String.format("Expect:    %s\n",expectS)+
      String.format("ActualFwd: %s\n",actualFwd)+
      String.format("ActualRev: %s\n",actualRev)+
      String.format("Changes:\n%s------\n",Arrays.deepToString(changes))+
      "";
    assertEquals(msg,expectS,actualFwd);
    assertEquals(msg,expectS,actualRev);
  }

  // Make changes to an AdditiveList as described in the changes array 
  public void applyListChanges(Object changes[][], AdditiveList<Integer> list){
    String originalList = list.toString();
    ListIterator<Integer> iter = null;
    String pastChangesString ="";
    Object change[] = null;
    String changeString = "";
    int i = 0;
    boolean isError = false;
    Integer actual=null, expect=null;
    String errorMsg = "";
    try{
      for(i=0; i<changes.length; i++){
        change = changes[i];
        changeString = Arrays.deepToString(change);
        pastChangesString += String.format("%d: %s\n",i,changeString);
        String type = (String) change[0];
        if(type.equals("iter front")){
          iter = list.listIterator(0);
        }
        else if(type.equals("iter rear")){
          iter = list.listIterator(list.size());
        }
        else if(type.equals("next")){
          actual = iter.next();
          expect = (Integer) change[1];
          if(!actual.equals(expect)){
            errorMsg = 
              String.format("\nUnexpected element at change #%d %s\n",i,changeString)+
              String.format("Expect: %s\n",expect)+
              String.format("Actual: %s\n",actual)+
              "";
            isError = true; break;
          }
        }
        else if(type.equals("prev")){
          actual = iter.previous();
          expect = (Integer) change[1];
          if(!actual.equals(expect)){
            errorMsg = 
              String.format("\nUnexpected element at change #%d %s\n",i,changeString)+
              String.format("Expect: %s\n",expect)+
              String.format("Actual: %s\n",actual)+
              "";
            isError = true; break;
          }
        }
        else if(type.equals("iter add")){
          iter.add((Integer) change[1]);
        }
        else if(type.equals("add")){
          for(int j=1; j<change.length; j++){
            list.add((Integer) change[j]);
          }
        }
        else if(type.equals("addI")){
          list.add((Integer) change[1], (Integer) change[2]);
        }
        else if(type.equals("undo")){
          list.undo();
        }
        else if(type.equals("redo")){
          list.redo();
        }
        else if(type.equals("exception")){
          boolean exceptionThrown = false;
          String iterMove = (String) change[1];
          try{
            if(iterMove.equals("next")){
              iter.next();
            }
            else if(iterMove.equals("prev")){
              iter.next();
            }
            else if(iterMove.equals("iter add")){
              iter.add((Integer) change[2]);
            }
            else{
              failFmt("Unknown iter move '%s': Bug in the tests",iterMove);
            }
          }
          catch(ConcurrentModificationException e){
            exceptionThrown = true;
          }
          if(!exceptionThrown){
            errorMsg = 
              String.format("\nExpected ConcurrentModificationException at change %d = %s\n",
                            i,changeString);
            isError = true; break;
          }
            
        }
        else{
          failFmt("Unknown command '%s': Bug in the tests",type);
        }
      }
    }
    catch(Exception e){
      StringWriter sw = new StringWriter();
      e.printStackTrace(new PrintWriter(sw));
      String exceptionAsString = sw.toString();
      String msg =
        String.format("\nException at change %d = %s\n",i,changeString)+
        String.format("Original List: %s\n",originalList)+
        String.format("Current List:  %s\n",list.toString())+
        String.format("Changes:\n%s--------\n",pastChangesString)+
        String.format("Exception and stack trace:\n%s",exceptionAsString)+
        "";
      failFmt(msg);
    }
    if(isError){
      String msg =
        errorMsg + 
        String.format("Original List: %s\n",originalList)+
        String.format("Current List:  %s\n",list.toString())+
        String.format("Changes:\n%s--------\n",pastChangesString)+
        "";
      failFmt(msg);
    }
  }
      
  ////////////////////////////////////////////////////////////////////////////////
  // Utilities to check boards
  ////////////////////////////////////////////////////////////////////////////////

  // LONGEST SEQUENCE Tests
  // Comparator to sort elements of longest sequence lists
  class RowMajor<T> implements Comparator<RowColElem<T>>{
    public int compare(RowColElem<T> x, RowColElem<T> y){
      int diff = x.getRow()-y.getRow();
      if(diff != 0){ return diff; }
      return x.getCol()-y.getCol();
    }
  }
  Comparator<RowColElem<Integer>> cmpI = new RowMajor<Integer>();

  public <T> void checkGet(T expect, ExpandableBoard<T> b, int row, int col){
    T actual = b.get(row,col);
    if(!actual.equals(expect)){
      failFmt("\nget(%d,%d) returned wrong results\nExpect: %s\nActual: %s\nBoard:\n%s\n",
              row,col,expect,actual,b.toString());
    }
  }

  public void applySets(int rowColElems[][], ExpandableBoard<Integer> board){
    for(int rce[] : rowColElems){
      int row=rce[0], col=rce[1], elem=rce[2];
      board.set(row,col,elem);
    }
  }

  public void applyUndos(int nUndos, ExpandableBoard<Integer> board){
    for(int i=0; i<nUndos; i++){
      board.undoSet();
    }
  }
  public void applyRedos(int nRedos, ExpandableBoard<Integer> board){
    for(int i=0; i<nRedos; i++){
      board.redoSet();
    }
  }

  public void checkExpands(int rowColElems[][], SparseBoard<Integer> board){
    for(int rce[] : rowColElems){
      int row=rce[0], col=rce[1], expect=rce[2];
      String before = board.toString();
      int actual = board.expandToInclude(row,col);
      String after = board.toString();
      if(actual != expect){
        String msg =
          "expandToInclude() returned wrong number of new elements\n"+
          "Expect: "+expect+"\n"+
          "Actual: "+actual+"\n"+
          String.format("Call: expandToInclude(%d,%d)\n",row,col)+
          "Before call:\n"+before+
          "After call:\n"+after+
          "Board Lists:\n"+
          "rowColOrder:      "+board.elementsInRowColOrder()+"\n"+
          "colRowOrder:      "+board.elementsInColRowOrder()+"\n"+
          "diagRowOrder:     "+board.elementsInDiagRowOrder()+"\n"+
          "adiagRevRowOrder: "+board.elementsInADiagReverseRowOrder()+"\n"+
          "";
        failFmt(msg);
      }
    }
  }

  // Check that the string representation is correct and that the fill
  // element is correct
  public <T> void checkBoard(SparseBoard<T> board, String expectS, T expectFillElem){
    T actualFillElem = board.getFillElem();
    assertEquals("Fill elements don't match",expectFillElem,actualFillElem);

    String actualS = board.toString();
    if(!actualS.equals(expectS)){
      String diff = simpleDiff2("EXPECT:\n"+expectS,"ACTUAL:\n"+actualS);
      failFmt("\nExpected and actual board strings do not match. Differences marked by ****\n"+diff+
              "Board Lists:\n"+
              "rowColOrder:      "+board.elementsInRowColOrder()+"\n"+
              "colRowOrder:      "+board.elementsInColRowOrder()+"\n"+
              "diagRowOrder:     "+board.elementsInDiagRowOrder()+"\n"+
              "adiagRevRowOrder: "+board.elementsInADiagReverseRowOrder()+"\n"+
              "");
    }
  }

  public <T> void checkBoard(SparseBoard<T> board, String expectS, T expectFillElem,
                             int eRowMin, int eRowMax, int eColMin, int eColMax){
    String actualS = board.toString();
    if(!actualS.equals(expectS)){
      String diff = simpleDiff2("EXPECT:\n"+expectS,"ACTUAL:\n"+actualS);
      failFmt("\nExpected and actual board strings do not match. Differences marked by ****\n"+diff+
              "Board Lists:\n"+
              "rowColOrder:      "+board.elementsInRowColOrder()+"\n"+
              "colRowOrder:      "+board.elementsInColRowOrder()+"\n"+
              "diagRowOrder:     "+board.elementsInDiagRowOrder()+"\n"+
              "adiagRevRowOrder: "+board.elementsInADiagReverseRowOrder()+"\n"+
              "");
    }

    T actualFillElem = board.getFillElem();
    assertEquals("Fill elements don't match",expectFillElem,actualFillElem);

    assertEquals("getRowMin() returned wrong number",eRowMin,board.getMinRow());
    assertEquals("getRowMax() returned wrong number",eRowMax,board.getMaxRow());
    assertEquals("getColMin() returned wrong number",eColMin,board.getMinCol());
    assertEquals("getColMax() returned wrong number",eColMax,board.getMaxCol());

    // if(board instanceof DenseBoard){
    //   DenseBoard<T> db = (DenseBoard<T>) board;
    //   assertEquals("getPhysicalRows() returned wrong number",db.getMaxRow()-db.getMinRow()+1,db.getPhysicalRows());
    //   assertEquals("getPhysicalCols() returned wrong number",db.getMaxCol()-db.getMinCol()+1,db.getPhysicalCols());
    // }
  }

  public <T> void checkLongestSequence(SparseBoard<T> b, String expect){
    List<RowColElem<T>> actual = b.getLongestSequence();
    Collections.sort(actual,new RowMajor<T>());
    String actualS = actual.toString();
    if(!actualS.equals(expect)){
      failFmt("Longest sequence doesn't match\n"+
              "Expect: "+expect +"\n"+
              "Actual: "+actualS+"\n"+
              "Board:\n"+b.toString()+
              "Board Lists:\n"+
              "rowColOrder:      "+b.elementsInRowColOrder()+"\n"+
              "colRowOrder:      "+b.elementsInColRowOrder()+"\n"+
              "diagRowOrder:     "+b.elementsInDiagRowOrder()+"\n"+
              "adiagRevRowOrder: "+b.elementsInADiagReverseRowOrder()+"\n"+
              "");
    }
  }

  public<T> void checkInternalSequences(SparseBoard<T> b,
                                        String expectRC, String expectCR,
                                        String expectDR, String expectAR){
    String actualRC = b.elementsInRowColOrder().toString();
    String actualCR = b.elementsInColRowOrder().toString();
    String actualDR = b.elementsInDiagRowOrder().toString();
    String actualAR = b.elementsInADiagReverseRowOrder().toString();

    String wrong = "**MISMATCH** ";

    String rcWrong = (expectRC.equals(actualRC)) ? "" : wrong;
    String crWrong = (expectCR.equals(actualCR)) ? "" : wrong;
    String drWrong = (expectDR.equals(actualDR)) ? "" : wrong;
    String arWrong = (expectAR.equals(actualAR)) ? "" : wrong;

    String msg =
      "Actual internal sequences did not match Expected\n"+
      "Expected Board Lists:\n"+
      "Expect rowColOrder:      "+rcWrong+expectRC+"\n"+
      "Actual rowColOrder:      "+rcWrong+actualRC+"\n"+
      "Expect colRowOrder:      "+crWrong+expectCR+"\n"+
      "Actual colRowOrder:      "+crWrong+actualCR+"\n"+
      "Expect diagRowOrder:     "+drWrong+expectDR+"\n"+
      "Actual diagRowOrder:     "+drWrong+actualDR+"\n"+
      "Expect adiagRevRowOrder: "+arWrong+expectAR+"\n"+
      "Actual adiagRevRowOrder: "+arWrong+actualAR+"\n"+
      "Board:\n"+
      b.toString()+
      "\n"+
      "";
    msg +=
      actualRC+"\n"+
      actualCR+"\n"+
      actualDR+"\n"+
      actualAR+"\n"+
      "";

    if(rcWrong.equals(wrong) || crWrong.equals(wrong) ||
       drWrong.equals(wrong) || arWrong.equals(wrong))
      {
        failFmt(msg);
      }
  }


  ////////////////////////////////////////////////////////////////////////////////
  // Utilities to append columns of strings
  ////////////////////////////////////////////////////////////////////////////////
  
  // Append strings as columns using space as the divider
  public static String appendColumns2(String all[]){
    return appendColumns2(all, " ");
  }
  
  // Create a side-by-side diff of two strings compared line by line
  public static String simpleDiff2(String x, String y){
    String xs[] = x.split("\n");
    String ys[] = y.split("\n");
    String sep = "      ";
    String dif = " **** ";
    StringBuilder sb = new StringBuilder();
    
    int maxWidth = 0;
    for(String s : xs){
      maxWidth = s.length() > maxWidth ? s.length() : maxWidth;
    }
    for(String s : ys){
      maxWidth = s.length() > maxWidth ? s.length() : maxWidth;
    }
    // Max width format
    String fmt = String.format("%%-%ds",maxWidth);
    
    // Construct the side-by-side diff
    for(int i = 0; i<xs.length || i<ys.length; i++){
      if(i<xs.length && i<ys.length){ // both exist, compare
        sb.append(String.format(fmt,xs[i]));
        String mid = xs[i].equals(ys[i]) ? sep : dif;
        sb.append(mid);
        sb.append(String.format(fmt,ys[i]));
        sb.append("\n");
      }
      else if(i<xs.length){     // only x left
        sb.append(String.format(fmt,xs[i]));
        sb.append(dif);
        sb.append(String.format(fmt,""));
        sb.append("\n");
      }
      else if(i<ys.length){     // only y left
        sb.append(String.format(fmt,""));
        sb.append(dif);
        sb.append(String.format(fmt,ys[i]));
        sb.append("\n");
      }
      else{
        throw new RuntimeException("Something fishy's going on here...");
      }
    }
    return sb.toString();
  }
  
  // Append string as columns using the provided divider between lines
  public static String appendColumns2(String all[], String divider){
    String allCols[][] = new String[all.length][];
    int widths[] = new int[all.length];
    int rowCounts[] = new int[all.length];
    for(int col=0; col<all.length; col++){
      widths[col]=1;            // Can't have %0s formats
      allCols[col] = all[col].split("\n");
      for(int row=0; row<allCols[col].length; row++){
        int len = allCols[col][row].length();
        widths[col] = len > widths[col] ? len : widths[col];
      }
    }
    String formats[] = new String[all.length];
    int maxRow = 0;
    for(int col=0; col<all.length; col++){
      String div = col < all.length-1 ? divider : "\n";
      formats[col] = String.format("%%-%ds%s",widths[col],div);
      maxRow = maxRow < allCols[col].length ? allCols[col].length : maxRow;
    }
    StringBuilder sb = new StringBuilder();
    for(int row=0; row<maxRow; row++){
      for(int col=0; col<all.length; col++){
        String fill = "";
        if(row < allCols[col].length){
          fill = allCols[col][row];
        }
        sb.append(String.format(formats[col],fill));
      }
    }
    return sb.toString();
  }

  public static void failFmt(String fmt, Object... args){
    fail(String.format(fmt,args));
  }

  // @Test(timeout=1000,expected=SomeException.class)
  // @Test(timeout=1000) public void dummy(){ }

  ////////////////////////////////////////////////////////////////////////////////
  // BEGIN TESTS
  ////////////////////////////////////////////////////////////////////////////////

  ////////////////////////////////////////////////////////////////////////////////
  // AdditiveList tests
  ////////////////////////////////////////////////////////////////////////////////
  @Test(timeout=1000) public void iterator_previous1(){
    Integer initial[] = {1, 2, 3, 4, 5};
    AdditiveList<Integer> list = new AdditiveList<Integer>();
    list.addAll(Arrays.asList(initial));
    ListIterator<Integer> iter = list.listIterator(list.size());
    assertTrue(iter.hasPrevious());
    for(int i=initial.length-1; i>=0; i--){
      Integer actualElement = iter.previous();
      Integer expectElement = initial[i];
      boolean actualHasPrevious = iter.hasPrevious();
      boolean expectHasPrevious = i>0;
      boolean actualHasNext = iter.hasNext();
      boolean expectHasNext = i<list.size();
      String msg =
        String.format("List: %s\n",list)+
        String.format("Iteration %d\n",i)+
        String.format("Expect hasPrevious(): %s\n",expectHasPrevious)+
        String.format("Actual hasPrevious(): %s\n",actualHasPrevious)+
        String.format("Expect element: %s\n",expectElement)+
        String.format("Actual element: %s\n",actualElement)+
        "";
      assertEquals(msg,expectHasNext,actualHasNext);
      assertEquals(msg,expectHasPrevious,actualHasPrevious);
      assertEquals(msg,expectElement,actualElement);
    }
  }
  @Test(timeout=1000) public void iterator_previous2(){
    Integer initial[] = {1};
    AdditiveList<Integer> list = new AdditiveList<Integer>();
    list.addAll(Arrays.asList(initial));
    ListIterator<Integer> iter = list.listIterator(list.size());
    assertTrue(iter.hasPrevious());
    for(int i=initial.length-1; i>=0; i--){
      Integer actualElement = iter.previous();
      Integer expectElement = initial[i];
      boolean actualHasPrevious = iter.hasPrevious();
      boolean expectHasPrevious = i>0;
      boolean actualHasNext = iter.hasNext();
      boolean expectHasNext = i<list.size();
      String msg =
        String.format("List: %s\n",list)+
        String.format("Iteration %d\n",i)+
        String.format("Expect hasPrevious(): %s\n",expectHasPrevious)+
        String.format("Actual hasPrevious(): %s\n",actualHasPrevious)+
        String.format("Expect element: %s\n",expectElement)+
        String.format("Actual element: %s\n",actualElement)+
        "";
      assertEquals(msg,expectHasNext,actualHasNext);
      assertEquals(msg,expectHasPrevious,actualHasPrevious);
      assertEquals(msg,expectElement,actualElement);
    }
  }
  @Test(timeout=1000) public void iterator_previous3(){
    Integer initial[] = {};
    AdditiveList<Integer> list = new AdditiveList<Integer>();
    list.addAll(Arrays.asList(initial));
    ListIterator<Integer> iter = list.listIterator(list.size());
    assertFalse(iter.hasPrevious());
    try{
      iter.previous();
    }
    catch(Exception e){
      return;
    }
    failFmt("Expected an exception to be thrown: no previous element in empty list");
  }

  @Test(timeout=1000) public void iterator_next_previous1(){
    AdditiveList<Integer> list = new AdditiveList<Integer>();
    Object changes[][] ={
      {"add",1},
      {"iter front"},
      {"next",1},
      {"prev",1},
    };
    applyListChanges(changes,list);
    checkList("[1]",changes,list);
  }
  @Test(timeout=1000) public void iterator_next_previous2(){
    AdditiveList<Integer> list = new AdditiveList<Integer>();
    Object changes[][] ={
      {"add",1,2,3,4,5},
      {"iter front"},
      {"next",1},
      {"next",2},
      {"next",3},
      {"prev",3},
      {"prev",2},
      {"prev",1},
    };
    applyListChanges(changes,list);
    checkList("[1, 2, 3, 4, 5]",changes,list);
  }
  @Test(timeout=1000) public void iterator_next_previous3(){
    AdditiveList<Integer> list = new AdditiveList<Integer>();
    Object changes[][] ={
      {"add",1,2,3,4,5},
      {"iter rear"},
      {"prev",5},
      {"prev",4},
      {"prev",3},
      {"prev",2},
      {"next",2},
      {"next",3},
      {"prev",3},
      {"prev",2},
      {"prev",1},
      {"next",1},
    };
    applyListChanges(changes,list);
    checkList("[1, 2, 3, 4, 5]",changes,list);
  }

  @Test(timeout=1000) public void iterator_add1(){
    AdditiveList<Integer> list = new AdditiveList<Integer>();
    Object changes[][] ={
      {"iter front"},
      {"iter add",1},
    };
    applyListChanges(changes,list);
    checkList("[1]",changes,list);
  }
  @Test(timeout=1000) public void iterator_add2(){
    AdditiveList<Integer> list = new AdditiveList<Integer>();
    Object changes[][] ={
      {"iter front"},
      {"iter add",1},
      {"iter add",2},
      {"iter add",3},
    };
    applyListChanges(changes,list);
    checkList("[1, 2, 3]",changes,list);
  }
  @Test(timeout=1000) public void iterator_add3(){
    AdditiveList<Integer> list = new AdditiveList<Integer>();
    Object changes[][] ={
      {"iter front"},
      {"iter add",1},
    };
    applyListChanges(changes,list);
    checkList("[1]",changes,list);
  }
  @Test(timeout=1000) public void iterator_add4(){
    AdditiveList<Integer> list = new AdditiveList<Integer>();
    Object changes[][] ={
      {"iter front"},
      {"iter add",2},
      {"iter add",3},
      {"iter front"},
      {"iter add",0},
      {"iter add",1},
    };
    applyListChanges(changes,list);
    checkList("[0, 1, 2, 3]",changes,list);
  }
  @Test(timeout=1000) public void iterator_add5(){
    AdditiveList<Integer> list = new AdditiveList<Integer>();
    Object changes[][] ={
      {"iter front"},
      {"iter add",2},
      {"iter add",3},
      {"iter front"},
      {"iter add",0},
      {"iter add",1},
      {"iter rear"},
      {"iter add",4},
      {"iter add",5},
    };
    applyListChanges(changes,list);
    checkList("[0, 1, 2, 3, 4, 5]",changes,list);
  }

  @Test(timeout=1000) public void iterator_next_add1(){
    AdditiveList<Integer> list = new AdditiveList<Integer>();
    Object changes[][] ={
      {"add", 1,3,5},
      {"iter front"},
      {"next",1},
      {"iter add",2},
      {"next",3},
      {"iter add",4},
    };
    applyListChanges(changes,list);
    checkList("[1, 2, 3, 4, 5]",changes,list);
  }
  @Test(timeout=1000) public void iterator_next_add2(){
    AdditiveList<Integer> list = new AdditiveList<Integer>();
    Object changes[][] ={
      {"add", 3,4},
      {"iter front"},
      {"iter add",1},
      {"iter add",2},
      {"next",3},
      {"next",4},
      {"iter add",5},
      {"addI",5,6},
    };
    applyListChanges(changes,list);
    checkList("[1, 2, 3, 4, 5, 6]",changes,list);
  }
  @Test(timeout=1000) public void iterator_next_add3(){
    AdditiveList<Integer> list = new AdditiveList<Integer>();
    Object changes[][] ={
      {"iter front"},
      {"iter add",2},
      {"addI",0,1},
      {"iter rear"},
      {"iter add",4},
      {"iter front"},
      {"next",1},
      {"next",2},
      {"iter add",3},
      {"next",4},
      {"iter add",5},
    };
    applyListChanges(changes,list);
    checkList("[1, 2, 3, 4, 5]",changes,list);
  }

  @Test(timeout=1000) public void iterator_prev_add1(){
    AdditiveList<Integer> list = new AdditiveList<Integer>();
    Object changes[][] ={
      {"add",1,2,4,5},
      {"iter rear"},
      {"prev",5},
      {"prev",4},
      {"iter add",3},
      {"prev",3},
      {"prev",2},
      {"prev",1},
    };
    applyListChanges(changes,list);
    checkList("[1, 2, 3, 4, 5]",changes,list);
  }
  @Test(timeout=1000) public void iterator_prev_add2(){
    AdditiveList<Integer> list = new AdditiveList<Integer>();
    Object changes[][] ={
      {"add",1,3,5},
      {"iter rear"},
      {"prev",5},
      {"iter add",4},
      {"prev",4},
      {"prev",3},
      {"iter add",2},
      {"prev",2},
      {"prev",1},
      {"iter add",0},
      {"prev",0},
    };
    applyListChanges(changes,list);
    checkList("[0, 1, 2, 3, 4, 5]",changes,list);
  }
  @Test(timeout=1000) public void iterator_prev_add3(){
    AdditiveList<Integer> list = new AdditiveList<Integer>();
    Object changes[][] ={
      {"add",2,3,4},
      {"iter rear"},
      {"iter add",5},
      {"iter add",6},
      {"prev",6},
      {"prev",5},
      {"addI",0,1},
      {"iter front"},
      {"iter add",0},
      {"addI",7,7},
      {"iter rear"},
      {"prev",7},
      {"prev",6},
    };
    applyListChanges(changes,list);
    checkList("[0, 1, 2, 3, 4, 5, 6, 7]",changes,list);
  }

  @Test(timeout=1000) public void iterator_next_prev_add1(){
    AdditiveList<Integer> list = new AdditiveList<Integer>();
    Object changes[][] ={
      {"iter front"},
      {"iter add",3},
      {"prev",3},
      {"iter add",2},
      {"next",3},
      {"iter add",4},
      {"prev",4},
      {"prev",3},
      {"prev",2},
      {"iter add",1},
      {"next",2},
      {"next",3},
    };
    applyListChanges(changes,list);
    checkList("[1, 2, 3, 4]",changes,list);
  }
  @Test(timeout=1000) public void iterator_next_prev_add2(){
    AdditiveList<Integer> list = new AdditiveList<Integer>();
    Object changes[][] ={
      {"add",2,3,4},
      {"iter front"},
      {"iter add",1},
      {"prev",1},
      {"iter add",0},
      {"next",1},
      {"next",2},
      {"next",3},
      {"next",4},
      {"iter add",7},
      {"prev",7},
      {"prev",4},
      {"next",4},
      {"iter add",6},
      {"prev",6},
      {"iter add",5},
      {"next",6},
      {"next",7},
    };
    applyListChanges(changes,list);
    checkList("[0, 1, 2, 3, 4, 5, 6, 7]",changes,list);
  }
  @Test(timeout=1000) public void iterator_next_prev_add3(){
    AdditiveList<Integer> list = new AdditiveList<Integer>();
    Object changes[][] ={
      {"iter front"},
      {"iter add",3},
      {"prev",3},
      {"iter add",2},
      {"next",3},
      {"iter add",4},
      {"prev",4},
      {"prev",3},
      {"prev",2},
      {"iter add",1},
      {"next",2},
      {"next",3},
    };
    applyListChanges(changes,list);
    checkList("[1, 2, 3, 4]",changes,list);
  }
  @Test(timeout=1000) public void iterator_next_prev_add4(){
    AdditiveList<Integer> list = new AdditiveList<Integer>();
    Object changes[][] ={
      {"iter front"},
      {"iter add",2},
      {"iter add",4},
      {"iter add",6},
      {"iter front"},
      {"iter add",1},
      {"next",2},
      {"next",4},
      {"iter add",5},
      {"prev",5},
      {"prev",4},
      {"iter add",3},
      {"iter rear"},
      {"iter add",7},
      {"iter front"},
      {"iter add",0},
    };
    applyListChanges(changes,list);
    checkList("[0, 1, 2, 3, 4, 5, 6, 7]",changes,list);
  }

  @Test(timeout=1000) public void list_can_undo_redo1(){
    AdditiveList<Integer> list = new AdditiveList<Integer>();
    assertFalse("Can't undo in fresh list",list.canUndo());
    assertFalse("Can't redo in fresh list",list.canRedo());
  }
  @Test(timeout=1000) public void list_can_undo_redo2(){
    AdditiveList<Integer> list = new AdditiveList<Integer>();
    list.add(1);
    assertTrue( "Can undo in list with an addition",list.canUndo());
    assertFalse("Can't redo in only add list",list.canRedo());
    list.undo();
    assertFalse("Can't undo in list with 1 add and 1 undo",list.canUndo());
    assertTrue( "Can redo in list with 1 add and 1 undo",list.canRedo());
  }
  @Test(timeout=1000) public void list_can_undo_redo3(){
    AdditiveList<Integer> list = new AdditiveList<Integer>();
    list.add(1);
    list.add(2);
    list.undo();
    list.add(3);
    assertTrue( "Can undo in list after add",list.canUndo());
    assertFalse("Can't redo in list after add",list.canRedo());
  }


  @Test(timeout=1000) public void list_undo_redo_last1(){
    AdditiveList<Integer> list = new AdditiveList<Integer>();
    Object changes[][] ={
      {"add",1},
      {"undo"},
    };
    applyListChanges(changes,list);
    checkList("[]",changes,list);
  }
  @Test(timeout=1000) public void list_undo_redo_last2(){
    AdditiveList<Integer> list = new AdditiveList<Integer>();
    Object changes[][] ={
      {"add",1},
      {"undo"},
      {"redo"},
    };
    applyListChanges(changes,list);
    checkList("[1]",changes,list);
  }
  @Test(timeout=1000) public void list_undo_redo_last3(){
    AdditiveList<Integer> list = new AdditiveList<Integer>();
    Object changes[][] ={
      {"add",1},
      {"undo"},
      {"redo"},
      {"add",2},
    };
    applyListChanges(changes,list);
    checkList("[1, 2]",changes,list);
  }
  @Test(timeout=1000) public void list_undo_redo_last4(){
    AdditiveList<Integer> list = new AdditiveList<Integer>();
    Object changes[][] ={
      {"add",1},
      {"undo"},
      {"add",2, 3},
      {"undo"},
      {"undo"},
      {"redo"},
      {"redo"},
      {"add",4},
    };
    applyListChanges(changes,list);
    checkList("[2, 3, 4]",changes,list);
  }
  @Test(timeout=1000) public void list_undo_redo_last5(){
    AdditiveList<Integer> list = new AdditiveList<Integer>();
    Object changes[][] ={
      {"add",1,2,3},
      {"undo"},
      {"add",3,4},
      {"undo"},
      {"undo"},
      {"undo"},
      {"undo"},
      {"redo"},
      {"redo"},
      {"redo"},
      {"add",4,5},
      {"undo"},
    };
    applyListChanges(changes,list);
    checkList("[1, 2, 3, 4]",changes,list);
  }

  @Test(timeout=1000) public void list_undo_redo_mid1(){
    AdditiveList<Integer> list = new AdditiveList<Integer>();
    Object changes[][] ={
      {"add",0,1,2,4,5},
      {"addI",3,3},
      {"undo"},
    };
    applyListChanges(changes,list);
    checkList("[0, 1, 2, 4, 5]",changes,list);
  }
  @Test(timeout=1000) public void list_undo_redo_mid2(){
    AdditiveList<Integer> list = new AdditiveList<Integer>();
    Object changes[][] ={
      {"add",0,1,2,4,5},
      {"addI",3,3},
      {"undo"},
      {"redo"},
    };
    applyListChanges(changes,list);
    checkList("[0, 1, 2, 3, 4, 5]",changes,list);
  }
  @Test(timeout=1000) public void list_undo_redo_mid3(){
    AdditiveList<Integer> list = new AdditiveList<Integer>();
    Object changes[][] ={
      {"add",0,2,4,5},
      {"addI",1,1},
      {"undo"},
      {"addI",2,3},
      {"undo"},
      {"redo"},
      {"addI",1,1},
    };
    applyListChanges(changes,list);
    checkList("[0, 1, 2, 3, 4, 5]",changes,list);
  }
  @Test(timeout=1000) public void list_undo_redo_mid4(){
    AdditiveList<Integer> list = new AdditiveList<Integer>();
    Object changes[][] ={
      {"add",0,1,6,7},
      {"addI",2,2},
      {"addI",3,5},
      {"addI",3,3},
      {"undo"},
      {"undo"},
    };
    applyListChanges(changes,list);
    checkList("[0, 1, 2, 6, 7]",changes,list);
  }
  @Test(timeout=1000) public void list_undo_redo_mid5(){
    AdditiveList<Integer> list = new AdditiveList<Integer>();
    Object changes[][] ={
      {"add",0,1,6,7},
      {"addI",2,2},
      {"addI",3,5},
      {"addI",3,3},
      {"undo"},
      {"undo"},
      {"redo"},
      {"redo"},
    };
    applyListChanges(changes,list);
    checkList("[0, 1, 2, 3, 5, 6, 7]",changes,list);
  }
  @Test(timeout=1000) public void list_undo_redo_mid6(){
    AdditiveList<Integer> list = new AdditiveList<Integer>();
    Object changes[][] ={
      {"add",0,1,6,7},
      {"addI",2,2},
      {"addI",3,5},
      {"addI",3,3},
      {"undo"},
      {"undo"},
      {"redo"},
      {"redo"},
      {"addI",4,-1},
      {"undo"},
      {"undo"},
      {"redo"},
      {"addI",4,4},
    };
    applyListChanges(changes,list);
    checkList("[0, 1, 2, 3, 4, 5, 6, 7]",changes,list);
  }
  @Test(timeout=1000) public void list_undo_redo_mid7(){
    AdditiveList<Integer> list = new AdditiveList<Integer>();
    Object changes[][] ={
      {"add",0,1,6},
      {"addI",2,-1},
      {"addI",3,-2},
      {"addI",3,-3},
      {"undo"},
      {"undo"},
      {"add",-4},
      {"undo"},
      {"undo"},
      {"undo"},
      {"undo"},
      {"undo"},
      {"redo"},
      {"redo"},
      {"add",4},
      {"addI",3,-5},
      {"undo"},
      {"addI",2,2},
      {"addI",3,3},
      {"addI",3,-6},
      {"undo"},
    };
    applyListChanges(changes,list);
    checkList("[0, 1, 2, 3, 4]",changes,list);
  }

  @Test(timeout=1000) public void list_undo_redo_iter1(){
    AdditiveList<Integer> list = new AdditiveList<Integer>();
    Object changes[][] ={
      {"iter rear"},
      {"iter add",1},
      {"undo"},       
    };
    applyListChanges(changes,list);
    checkList("[]",changes,list);
  }
  @Test(timeout=1000) public void list_undo_redo_iter2(){
    AdditiveList<Integer> list = new AdditiveList<Integer>();
    Object changes[][] ={
      {"iter rear"},
      {"iter add",1},
      {"undo"},       
      {"redo"},       
      {"iter rear"},
      {"iter add",2},
    };
    applyListChanges(changes,list);
    checkList("[1, 2]",changes,list);
  }
  @Test(timeout=1000) public void list_undo_redo_iter3(){
    AdditiveList<Integer> list = new AdditiveList<Integer>();
    Object changes[][] ={
      {"iter rear"},
      {"iter add",1},
      {"undo"},       
      {"redo"},       
      {"iter rear"},
      {"iter add",-1},
      {"undo"},
      {"iter front"},
      {"iter add",0},
    };
    applyListChanges(changes,list);
    checkList("[0, 1]",changes,list);
  }
  @Test(timeout=1000) public void list_undo_redo_iter4(){
    AdditiveList<Integer> list = new AdditiveList<Integer>();
    Object changes[][] ={
      {"add",1,3,5,7},
      {"iter front"},
      {"iter add",0},
      {"next",1},
      {"iter add",2},
      {"iter add",-1},
      {"next",3},
      {"iter add",-2},
      {"next",5},
      {"undo"},       
      {"undo"},       
    };
    applyListChanges(changes,list);
    checkList("[0, 1, 2, 3, 5, 7]",changes,list);
  }
  @Test(timeout=1000) public void list_undo_redo_iter5(){
    AdditiveList<Integer> list = new AdditiveList<Integer>();
    Object changes[][] ={
      {"add",1,3,5,7},
      {"iter front"},
      {"iter add",0},
      {"next",1},
      {"iter add",2},
      {"iter add",-1},
      {"next",3},
      {"iter add",-2},
      {"next",5},
      {"undo"},       
      {"undo"},       
      {"iter rear"},
      {"iter add",-3},
      {"prev",-3},
      {"prev",7},
      {"prev",5},
      {"iter add",-3},
      {"iter add",-4},
      {"undo"},
      {"undo"},
      {"undo"},
    };
    applyListChanges(changes,list);
    checkList("[0, 1, 2, 3, 5, 7]",changes,list);
  }
  @Test(timeout=1000) public void list_undo_redo_iter6(){
    AdditiveList<Integer> list = new AdditiveList<Integer>();
    Object changes[][] ={
      {"add",1,3,5,7},
      {"iter front"},
      {"iter add",0},
      {"next",1},
      {"iter add",2},
      {"iter add",-1},
      {"next",3},
      {"iter add",-2},
      {"next",5},
      {"undo"},       
      {"undo"},       
      {"iter rear"},
      {"iter add",8},
      {"prev",8},
      {"prev",7},
      {"prev",5},
      {"iter add",-3},
      {"iter add",-4},
      {"undo"},
      {"undo"},
      {"undo"},
      {"redo"},
      {"iter rear"},
      {"prev",8},
      {"prev",7},
      {"iter add",6},
      {"prev",6},
      {"prev",5},
      {"iter add",4},
      {"iter add",-5},
      {"iter add",-6},
      {"undo"},
      {"undo"},
      {"undo"},
      {"redo"},
    };
    applyListChanges(changes,list);
    checkList("[0, 1, 2, 3, 4, 5, 6, 7, 8]",changes,list);
  }
  @Test(timeout=1000) public void list_undo_redo_iter7(){
    AdditiveList<Integer> list = new AdditiveList<Integer>();
    Object changes[][] ={
      {"add",1,3,5,7},
      {"iter front"},
      {"next",1},
      {"iter add",2},
      {"next",3},
      {"iter add",-1},
      {"undo"},
      {"addI",3,4},
      {"iter front"},
      {"next",1},
      {"next",2},
      {"next",3},
      {"next",4},
      {"addI",5,6},
      {"iter rear"},
      {"prev",7},
      {"prev",6},
      {"prev",5},
      {"iter add",-2},
      {"prev",-2},
      {"prev",4},
      {"iter add",-3},
      {"undo"},
      {"undo"},
      {"addI",0,0},
    };
    applyListChanges(changes,list);
    checkList("[0, 1, 2, 3, 4, 5, 6, 7]",changes,list);
  }

  // ConcurrentModificationExceptions are thrown appropriately
  @Test(timeout=1000) public void list_iter_exceptions1(){
    AdditiveList<Integer> list = new AdditiveList<Integer>();
    Object changes[][] ={
      {"add",1},
      {"iter front"},
      {"add",2},
      {"exception","next"},
    };
    applyListChanges(changes,list);
  }
  @Test(timeout=1000) public void list_iter_exceptions2(){
    AdditiveList<Integer> list = new AdditiveList<Integer>();
    Object changes[][] ={
      {"add",2},
      {"iter rear"},
      {"addI",0,1},
      {"exception","prev"},
    };
    applyListChanges(changes,list);
  }
  @Test(timeout=1000) public void list_iter_exceptions3(){
    AdditiveList<Integer> list = new AdditiveList<Integer>();
    Object changes[][] ={
      {"add",1,3},
      {"iter front"},
      {"next",1},
      {"iter add",2},
      {"add",4},
      {"exception","prev"},
    };
    applyListChanges(changes,list);
  }
  @Test(timeout=1000) public void list_iter_exceptions4(){
    AdditiveList<Integer> list = new AdditiveList<Integer>();
    Object changes[][] ={
      {"add",1,3},
      {"iter front"},
      {"next",1},
      {"iter add",2},
      {"add",4},
      {"exception","next"},
    };
    applyListChanges(changes,list);
  }
  @Test(timeout=1000) public void list_iter_exceptions5(){
    AdditiveList<Integer> list = new AdditiveList<Integer>();
    Object changes[][] ={
      {"add",1,3},
      {"iter front"},
      {"next",1},
      {"iter add",2},
      {"next",3},
      {"add",4},
      {"exception","iter add",-1},
    };
    applyListChanges(changes,list);
  }
  @Test(timeout=1000) public void list_iter_exceptions6(){
    AdditiveList<Integer> list = new AdditiveList<Integer>();
    Object changes[][] ={
      {"add",1,2,3},
      {"iter front"},
      {"next",1},
      {"undo"},
      {"exception","next"},
    };
    applyListChanges(changes,list);
  }
  @Test(timeout=1000) public void list_iter_exceptions7(){
    AdditiveList<Integer> list = new AdditiveList<Integer>();
    Object changes[][] ={
      {"add",1,2,3},
      {"iter rear"},
      {"prev",3},
      {"undo"},
      {"exception","iter add",-1},
    };
    applyListChanges(changes,list);
  }
  @Test(timeout=1000) public void list_iter_exceptions8(){
    AdditiveList<Integer> list = new AdditiveList<Integer>();
    Object changes[][] ={
      {"add",1,2,4},
      {"addI",2,3},
      {"iter front"},
      {"next",1},
      {"next",2},
      {"next",3},
      {"undo"},
      {"iter front"},
      {"next",1},
      {"redo"},
      {"exception","next"},
    };
    applyListChanges(changes,list);
  }

  ////////////////////////////////////////////////////////////////////////////////
  // SparseBoard tests
  ////////////////////////////////////////////////////////////////////////////////

  // Check whether the longest sequence returned by the
  // getLongestSequence() is a copy or a shallow reference to an
  // internal field; make changes to the list and see if the board
  // returns the actual longest sequence
  @Test(timeout=1000) public void getLongestSequence_independent1(){
    int rowMin=-3, rowMax=2, colMin=0, colMax=4;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {1,0,1},
      {1,1,1},
      {2,4,2},
      {1,3,2},
      {3,5,2},
      {4,6,2},
    };
    applySets(sets,b);
    String expect = "[(1,3,2), (2,4,2), (3,5,2), (4,6,2)]";
    checkLongestSequence(b,expect);
    List<RowColElem<Integer>> copy = b.getLongestSequence();
    Collections.sort(copy,new RowMajor<Integer>());
    copy.remove(0);
    assertEquals("Something is seriously screwy","[(2,4,2), (3,5,2), (4,6,2)]",copy.toString());
    List<RowColElem<Integer>> actual = b.getLongestSequence();
    Collections.sort(actual,new RowMajor<Integer>());
    String actualS = actual.toString();
    if(!actualS.equals(expect)){
      failFmt("Longest sequence is not making deep copies\n"+
              "Expect: "+expect +"\n"+
              "Actual: "+actualS+"\n"+
              "Board:\n"+b.toString()+
              "");
    }
  }
  @Test(timeout=1000) public void getLongestSequence_independent2(){
    Integer fill = new Integer(0);
    Integer mat [][] = {
      { 1, 0, 3, 8, },
      { 4, 0, 3, 8, },
      { 0, 0, 3, 0, },
    };
    SparseBoard<Integer> b = new SparseBoard<Integer>(mat, fill);
    String expect = "[(0,2,3), (1,2,3), (2,2,3)]";
    checkLongestSequence(b,expect);
    List<RowColElem<Integer>> copy = b.getLongestSequence();
    copy.clear();
    assertEquals("Somethign is seriously screwy","[]",copy.toString());
    List<RowColElem<Integer>> actual = b.getLongestSequence();
    Collections.sort(actual,new RowMajor<Integer>());
    String actualS = actual.toString();
    if(!actualS.equals(expect)){
      failFmt("Longest sequence is not making deep copies\n"+
              "Expect: "+expect +"\n"+
              "Actual: "+actualS+"\n"+
              "Board:\n"+b.toString()+
              "");
    }
  }

  // Check to see if undo/redo and setFillElem play nice together
  @Test(timeout=1000) public void undo_redo_setFill1(){
    int fill = 0;
    String expectB;
    SparseBoard<Integer> b = new SparseBoard<Integer>(fill);
    int sets[][];

    sets = new int[][]{
      {0,0, 11},
    };
    applySets(sets, b);

    expectB =
      "    |  0|\n"+
      "    +---+\n"+
      "  0 | 11|\n"+
      "    +---+\n"+
      "";

    checkBoard(b,expectB,fill);

    fill = 999;
    b.setFillElem(fill);
    b.undoSet();

    expectB =
      "    |  0|\n"+
      "    +---+\n"+
      "  0 |999|\n"+
      "    +---+\n"+
      "";

    checkBoard(b,expectB,fill);
  }
  @Test(timeout=1000) public void undo_redo_setFill2(){
    int fill = 0;
    String expectB;
    SparseBoard<Integer> b = new SparseBoard<Integer>(fill);
    int sets[][];

    sets = new int[][]{
      {2,2, 11},
      {-1,0,22},
      {-1,2,33},
      {1,0,44},
    };
    applySets(sets, b);

    expectB =
      "    |  0|  1|  2|\n"+
      "    +---+---+---+\n"+
      " -1 | 22|  0| 33|\n"+
      "    +---+---+---+\n"+
      "  0 |  0|  0|  0|\n"+
      "    +---+---+---+\n"+
      "  1 | 44|  0|  0|\n"+
      "    +---+---+---+\n"+
      "  2 |  0|  0| 11|\n"+
      "    +---+---+---+\n"+
      "";
    checkBoard(b,expectB,fill);

    b.undoSet();
    b.undoSet();
    fill = 999;
    b.setFillElem(fill);

    expectB =
      "    |  0|  1|  2|\n"+
      "    +---+---+---+\n"+
      " -1 | 22|999|999|\n"+
      "    +---+---+---+\n"+
      "  0 |999|999|999|\n"+
      "    +---+---+---+\n"+
      "  1 |999|999|999|\n"+
      "    +---+---+---+\n"+
      "  2 |999|999| 11|\n"+
      "    +---+---+---+\n"+
      "";
    checkBoard(b,expectB,fill);

    b.redoSet();
    
    expectB =
      "    |  0|  1|  2|\n"+
      "    +---+---+---+\n"+
      " -1 | 22|999| 33|\n"+
      "    +---+---+---+\n"+
      "  0 |999|999|999|\n"+
      "    +---+---+---+\n"+
      "  1 |999|999|999|\n"+
      "    +---+---+---+\n"+
      "  2 |999|999| 11|\n"+
      "    +---+---+---+\n"+
      "";
    checkBoard(b,expectB,fill);

    fill = 666;
    b.setFillElem(fill);
    b.redoSet();
    
    expectB =
      "    |  0|  1|  2|\n"+
      "    +---+---+---+\n"+
      " -1 | 22|666| 33|\n"+
      "    +---+---+---+\n"+
      "  0 |666|666|666|\n"+
      "    +---+---+---+\n"+
      "  1 | 44|666|666|\n"+
      "    +---+---+---+\n"+
      "  2 |666|666| 11|\n"+
      "    +---+---+---+\n"+
      "";
    checkBoard(b,expectB,fill);
  }

  // Ensure undo history is empty after 2D constructor
  @Test(timeout=1000) public void no_undo_2D_constructor(){
    Integer fill = new Integer(0);
    Integer mat [][] = {
      { 1, 0, 3, 8, },
      { 4, 0, 3, 8, },
      { 0, 0, 3, 0, },
    };
    SparseBoard<Integer> b = new SparseBoard<Integer>(mat, fill);
    String expectS =
      "    |  0|  1|  2|  3|\n"+
      "    +---+---+---+---+\n"+
      "  0 |  1|  0|  3|  8|\n"+
      "    +---+---+---+---+\n"+
      "  1 |  4|  0|  3|  8|\n"+
      "    +---+---+---+---+\n"+
      "  2 |  0|  0|  3|  0|\n"+
      "    +---+---+---+---+\n"+
      "";
    checkBoard(b,expectS,fill);
    boolean thrown = false;
    String expectMsg = "Undo history is empty";
    try {
      b.undoSet();
    }
    catch(RuntimeException e){
      thrown = true;
      String actualMsg = e.getMessage();
      if(!actualMsg.equals(expectMsg)){
        failFmt("\nset() exception message does not match expected.\nExpect: %s\nActual: %s\n",
                expectMsg,actualMsg);
      }
    }
    if(thrown == false){
      failFmt("\nundoSet() on fresh board should throw exception with message:\n%s",expectMsg);
    }
    checkBoard(b,expectS,fill);
  }

  // Tests of board independence: multiple can exist at once
  @Test(timeout=1000) public void board_independence1(){
    int fill = 0;
    String expectB;
    SparseBoard<Integer> b1 = new SparseBoard<Integer>(fill);
    SparseBoard<Integer> b2 = new SparseBoard<Integer>(fill);
    int sets[][];

    sets = new int[][]{
      {2,2, 11},
      {-1,0,22},
      {-1,2,33},
      {1,0,44},
    };
    applySets(sets, b1);
    applySets(sets, b2);

    expectB =
      "    |  0|  1|  2|\n"+
      "    +---+---+---+\n"+
      " -1 | 22|  0| 33|\n"+
      "    +---+---+---+\n"+
      "  0 |  0|  0|  0|\n"+
      "    +---+---+---+\n"+
      "  1 | 44|  0|  0|\n"+
      "    +---+---+---+\n"+
      "  2 |  0|  0| 11|\n"+
      "    +---+---+---+\n"+
      "";
    checkBoard(b1,expectB,fill);
    checkBoard(b2,expectB,fill);

    sets = new int[][]{
      {3,5, 55},
    };
    applySets(sets, b1);
    checkBoard(b2,expectB,fill);

    expectB =
      "    |  0|  1|  2|  3|  4|  5|\n"+
      "    +---+---+---+---+---+---+\n"+
      " -1 | 22|  0| 33|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      "  0 |  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      "  1 | 44|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      "  2 |  0|  0| 11|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      "  3 |  0|  0|  0|  0|  0| 55|\n"+
      "    +---+---+---+---+---+---+\n"+
      "";
    checkBoard(b1,expectB,fill);
  }
  @Test(timeout=1000) public void board_independence2(){
    int fill = 0;
    String expectB;
    SparseBoard<Integer> b1 = new SparseBoard<Integer>(fill);
    SparseBoard<Integer> b2 = new SparseBoard<Integer>(fill);
    int sets[][];

    sets = new int[][]{
      {2,2, 11},
      {-1,0,22},
      {-1,2,33},
      {1,0,44},
    };
    applySets(sets, b1);
    applySets(sets, b2);

    expectB =
      "    |  0|  1|  2|\n"+
      "    +---+---+---+\n"+
      " -1 | 22|  0| 33|\n"+
      "    +---+---+---+\n"+
      "  0 |  0|  0|  0|\n"+
      "    +---+---+---+\n"+
      "  1 | 44|  0|  0|\n"+
      "    +---+---+---+\n"+
      "  2 |  0|  0| 11|\n"+
      "    +---+---+---+\n"+
      "";
    checkBoard(b1,expectB,fill);
    checkBoard(b2,expectB,fill);

    b1.setFillElem(999);
    checkBoard(b2,expectB,fill);
    fill = 999;

    expectB =
      "    |  0|  1|  2|\n"+
      "    +---+---+---+\n"+
      " -1 | 22|999| 33|\n"+
      "    +---+---+---+\n"+
      "  0 |999|999|999|\n"+
      "    +---+---+---+\n"+
      "  1 | 44|999|999|\n"+
      "    +---+---+---+\n"+
      "  2 |999|999| 11|\n"+
      "    +---+---+---+\n"+
      "";
    checkBoard(b1,expectB,fill);
  }
    
  ////////////////////////////////////////////////////////////////////////////////
  // ORIGINAL TESTS

  // ADHERENCE TO EXPANDABLEBOARD INTERFACE
  @Test(timeout=1000) public void expandableBoard1(){
    ExpandableBoard<String> b;
    b = new SparseBoard<String>(+0, +2, +0, +4, "");
  }

  // CONSTRUCTOR EXISTENCE TESTS
  @Test(timeout=1000) public void constructor1(){
    SparseBoard<String> b = new SparseBoard<String>(+0, +2, +0, +4, "");
  }
  @Test(timeout=1000) public void constructor2(){
    SparseBoard<String> b = new SparseBoard<String>(-4, +2, -5, -2, "ok");
  }
  @Test(timeout=1000) public void constructor3(){
    SparseBoard<Integer> b = new SparseBoard<Integer>(-3, +8, -3, 0, 0);
  }
  @Test(timeout=1000) public void constructor4(){
    Double fill = new Double(0.5);
    SparseBoard<Double> b = new SparseBoard<Double>(fill);
  }
  @Test(timeout=1000) public void constructor5(){
    Object fill = new Object();
    SparseBoard<Object> b = new SparseBoard<Object>(fill);
  }
  @Test(timeout=1000) public void constructor6(){
    Integer mat [][] = {
      { 1, 2, 3, 0},
      { 0, 0, 0, 0},
      { 4, 0, 5, 6},
    };
    Integer fill = new Integer(0);
    SparseBoard<Integer> b = new SparseBoard<Integer>(mat, fill);
  }

  // BOARD EXTENT TESTS
  @Test(timeout=1000) public void extents1(){
    int rowMin=0, rowMax=2, colMin=0, colMax=4;
    String fill="";
    SparseBoard<String> b = new SparseBoard<String>(rowMin,rowMax,colMin,colMax,fill);
    assertEquals(rowMin,b.getMinRow());
    assertEquals(rowMax,b.getMaxRow());
    assertEquals(colMin,b.getMinCol());
    assertEquals(colMax,b.getMaxCol());
  }
  @Test(timeout=1000) public void extents2(){
    int rowMin=-1, rowMax=-1, colMin=1, colMax=1;
    String fill="??";
    SparseBoard<String> b = new SparseBoard<String>(rowMin,rowMax,colMin,colMax,fill);
    assertEquals(rowMin,b.getMinRow());
    assertEquals(rowMax,b.getMaxRow());
    assertEquals(colMin,b.getMinCol());
    assertEquals(colMax,b.getMaxCol());
  }
  @Test(timeout=1000) public void extents3(){
    int rowMin=-5, rowMax=+10, colMin=-10, colMax=-2;
    Integer fill=0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    assertEquals(rowMin,b.getMinRow());
    assertEquals(rowMax,b.getMaxRow());
    assertEquals(colMin,b.getMinCol());
    assertEquals(colMax,b.getMaxCol());
  }
  @Test(timeout=1000) public void extents4(){
    int rowMin=-5, rowMax=+10, colMin=-3, colMax=8;
    Integer fill=0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    assertEquals(rowMin,b.getMinRow());
    assertEquals(rowMax,b.getMaxRow());
    assertEquals(colMin,b.getMinCol());
    assertEquals(colMax,b.getMaxCol());
  }
  @Test(timeout=1000) public void extents5(){
    int rowMin=0, rowMax=0, colMin=0, colMax=0;
    Double fill = new Double(0.5);
    SparseBoard<Double> b = new SparseBoard<Double>(fill);
    assertEquals(rowMin,b.getMinRow());
    assertEquals(rowMax,b.getMaxRow());
    assertEquals(colMin,b.getMinCol());
    assertEquals(colMax,b.getMaxCol());
  }
  @Test(timeout=1000) public void extents6(){
    int rowMin=0, rowMax=2, colMin=0, colMax=6;
    Integer mat [][] = {
      { 1, 2, 3, 0, 0, 3, 8, },
      { 4, 0, 5, 6, 0, 3, 8, },
      { 0, 0, 0, 0, 0, 3, 8, },
    };
    Integer fill = new Integer(0);
    SparseBoard<Integer> b = new SparseBoard<Integer>(mat, fill);
    assertEquals(rowMin,b.getMinRow());
    assertEquals(rowMax,b.getMaxRow());
    assertEquals(colMin,b.getMinCol());
    assertEquals(colMax,b.getMaxCol());
  }

  // GET(i,j) TESTS WITH VARIOUS CONSTRUCTORS

  // In bounds only
  @Test(timeout=1000) public void get1(){
    SparseBoard<String> b = new SparseBoard<String>(+0, +2, +0, +4, "");
    checkGet("", b, 0, 0);
    checkGet("", b, 0, 4);
    checkGet(new String(""), b, 1, 1);
    checkGet("", b, 2, 0);
    checkGet("", b, 2, 4);
  }
  // With out of bounds
  @Test(timeout=1000) public void get2(){
    SparseBoard<String> b = new SparseBoard<String>(-4, +2, -5, -2, "ok");
    checkGet("ok", b, 0, 0);
    checkGet(new String("ok"), b, 1, 1);
    checkGet("ok", b, -4, -2);
    checkGet("ok", b, -4, -5);
    checkGet("ok", b, -4, -1);
    checkGet("ok", b, +2, -3);
    checkGet("ok", b, +3, -8);
    checkGet("ok", b, -8, -8);
  }
  @Test(timeout=1000) public void get3(){
    SparseBoard<Integer> b = new SparseBoard<Integer>(-3, +8, -3, 0, 0);
    Integer fill = new Integer(0);
    checkGet(fill, b, 0, 0);
    checkGet(new Integer(0), b, 0, 0);
    checkGet(fill, b, -3, -3);
    checkGet(fill, b, +8, 0);
    checkGet(fill, b, -5, 0);
    checkGet(fill, b, +10, +2);
  }
  @Test(timeout=1000) public void get4(){
    Double fill = new Double(0.5);
    SparseBoard<Double> b = new SparseBoard<Double>(fill);
    checkGet(new Double(0.5), b, 0, 0);
    checkGet(fill, b, 0, 0);
    checkGet(fill, b, 1, 0);
    checkGet(fill, b, 0, -1);
    checkGet(fill, b, +1, -1);
    checkGet(fill, b, -4, 0);

  }
  @Test(timeout=1000) public void get5(){
    Object fill = new Object();
    SparseBoard<Object> b = new SparseBoard<Object>(fill);
    checkGet(fill, b, 0, 0);
    checkGet(fill, b, +1, +0);
    checkGet(fill, b, +0, +1);
    checkGet(fill, b, +1, +1);
    checkGet(fill, b, -3, -2);
  }
  @Test(timeout=1000) public void get6(){
    Integer mat [][] = {
      { 1, 2, 3, 0},
      { 0, 0, 0, 0},
      { 4, 0, 5, 6},
    };
    Integer fill = new Integer(0);
    SparseBoard<Integer> b = new SparseBoard<Integer>(mat, fill);
    for(int row=0; row<mat.length; row++){
      for(int col=0; col<mat.length; col++){
        checkGet(mat[row][col], b, row, col);
      }
    }
    checkGet(fill, b, -1, +0);
    checkGet(fill, b, +0, -1);
    checkGet(fill, b, +3, +4);
  }
  // Prove independence of the board from given 2d array
  @Test(timeout=1000) public void get7(){
    Integer mat [][] = {
      { 1, 2, 3, 0},
      { 0, 0, 0, 0},
      { 4, 0, 5, 6},
    };
    Integer fill = new Integer(0);
    SparseBoard<Integer> b = new SparseBoard<Integer>(mat, fill);
    mat[0][0] = new Integer(10);
    mat[1][2] = new Integer(11);
    
    checkGet(new Integer(1), b, +0, +0);
    checkGet(new Integer(0), b, +1, +2);
  }

  // SIMPLE GET AND SET FILL ELEMENT TESTS
  @Test(timeout=1000) public void get_setFillElem1(){
    SparseBoard<String> b = new SparseBoard<String>(+0, +2, +0, +4, "");
    assertEquals("", b.getFillElem());
  }
  @Test(timeout=1000) public void get_setFillElem2(){
    SparseBoard<String> b = new SparseBoard<String>(-4, +2, -5, -2, "ok");
    assertEquals("ok", b.getFillElem());
    String newFill = "ACK";
    b.setFillElem(newFill);
    assertEquals(newFill, b.getFillElem());
    checkGet(newFill, b, -4, -2);
    checkGet(newFill, b, -4, -5);
    checkGet(newFill, b, -4, -1);
    checkGet(newFill, b, +2, -3);
    checkGet(newFill, b, +3, -8);
    checkGet(newFill, b, -8, -8);
  }
  @Test(timeout=1000) public void get_setFillElem3(){
    Integer fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(-3, +8, -3, 0, fill);
    assertEquals(fill, b.getFillElem());
    Integer newFill = 10;
    b.setFillElem(newFill);
    assertEquals(newFill, b.getFillElem());
    checkGet(newFill, b, 0, 0);
    checkGet(newFill, b, -3, -3);
    checkGet(newFill, b, +8, 0);
    checkGet(newFill, b, -5, 0);
    checkGet(newFill, b, +10, +2);
  }
  @Test(timeout=1000) public void get_setFillElem4(){
    Double fill = new Double(0.5);
    SparseBoard<Double> b = new SparseBoard<Double>(fill);
    assertEquals(fill, b.getFillElem());
    assertEquals(new Double(fill), b.getFillElem());
    Double newFill = 1.5;
    b.setFillElem(newFill);
    assertEquals(newFill, b.getFillElem());
    assertEquals(new Double(newFill), b.getFillElem());

    checkGet(newFill, b, 0, 0);
    checkGet(newFill, b, +1, +0);
    checkGet(newFill, b, +0, +1);
    checkGet(newFill, b, +1, +1);
    checkGet(newFill, b, -3, -2);

    // Second change to fill element
    newFill = -1.5;
    b.setFillElem(newFill);
    assertEquals(newFill, b.getFillElem());
    assertEquals(new Double(newFill), b.getFillElem());

    checkGet(newFill, b, 0, 0);
    checkGet(newFill, b, +1, +0);
    checkGet(newFill, b, +0, +1);
    checkGet(newFill, b, +1, +1);
    checkGet(newFill, b, -3, -2);
  }
  @Test(timeout=1000) public void get_setFillElem5(){
    Object fill = new Object();
    SparseBoard<Object> b = new SparseBoard<Object>(fill);
    assertEquals(fill, b.getFillElem());
    Object newFill = new Object();
    b.setFillElem(newFill);
    assertEquals(newFill, b.getFillElem());

    checkGet(newFill, b, 0, 0);
    checkGet(newFill, b, +1, +0);
    checkGet(newFill, b, +0, +1);
    checkGet(newFill, b, +1, +1);
    checkGet(newFill, b, -3, -2);

  }

  // Trickier test: requires that during the 2D array constructor,
  // fill elements present in the provided 2D array are propery
  // "converted" into whatever internal fill element representation is
  // used so that changing the fill element later alters what is
  // returned for the fill positions
  @Test(timeout=1000) public void get_setFillElem6(){
    Integer mat [][] = {
      { 1, 2, 3, 0},
      { 0, 0, 0, 0},
      { 4, 0, 5, 6},
    };
    Integer fill = new Integer(0);
    SparseBoard<Integer> b = new SparseBoard<Integer>(mat, fill);
    assertEquals(fill, b.getFillElem());

    Integer newFill = -1;
    b.setFillElem(newFill);    
    assertEquals(newFill, b.getFillElem());

    for(int row=0; row<mat.length; row++){
      for(int col=0; col<mat.length; col++){
        if(mat[row][col].equals(fill)){
          checkGet(newFill, b, row, col);
        }
        else{
          checkGet(mat[row][col], b, row, col);
        }
      }
    }
    checkGet(newFill, b, -1, +0);
    checkGet(newFill, b, +0, -1);
    checkGet(newFill, b, +3, +4);
    
    // Second change
    newFill = +22;
    b.setFillElem(newFill);    
    assertEquals(newFill, b.getFillElem());

    for(int row=0; row<mat.length; row++){
      for(int col=0; col<mat.length; col++){
        if(mat[row][col].equals(fill)){
          checkGet(newFill, b, row, col);
        }
        else{
          checkGet(mat[row][col], b, row, col);
        }
      }
    }
    checkGet(newFill, b, -1, +0);
    checkGet(newFill, b, +0, -1);
    checkGet(newFill, b, +3, +4);
  }

  // TOSTRING TESTS
  @Test(timeout=1000) public void toString1(){
    int rowMin=1, rowMax=3, colMin=1, colMax=3;
    String fill="";
    SparseBoard<String> b = new SparseBoard<String>(rowMin,rowMax,colMin,colMax,fill);
    String expectS =
      "    |  1|  2|  3|\n"+
      "    +---+---+---+\n"+
      "  1 |   |   |   |\n"+
      "    +---+---+---+\n"+
      "  2 |   |   |   |\n"+
      "    +---+---+---+\n"+
      "  3 |   |   |   |\n"+
      "    +---+---+---+\n"+
      "";
    checkBoard(b,expectS,fill);
  }
  @Test(timeout=1000) public void toString2(){
    int rowMin=-1, rowMax=-1, colMin=1, colMax=1;
    String fill="??";
    SparseBoard<String> b = new SparseBoard<String>(rowMin,rowMax,colMin,colMax,fill);
    String expectS =
      "    |  1|\n"+
      "    +---+\n"+
      " -1 | ??|\n"+
      "    +---+\n"+
      "";
    checkBoard(b,expectS,fill);
  }
  @Test(timeout=1000) public void toString3(){
    int rowMin=-5, rowMax=+10, colMin=-10, colMax=-2;
    Integer fill=0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    String expectS =
      "    |-10| -9| -8| -7| -6| -5| -4| -3| -2|\n"+
      "    +---+---+---+---+---+---+---+---+---+\n"+
      " -5 |  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+\n"+
      " -4 |  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+\n"+
      " -3 |  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+\n"+
      " -2 |  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+\n"+
      " -1 |  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+\n"+
      "  0 |  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+\n"+
      "  1 |  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+\n"+
      "  2 |  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+\n"+
      "  3 |  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+\n"+
      "  4 |  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+\n"+
      "  5 |  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+\n"+
      "  6 |  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+\n"+
      "  7 |  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+\n"+
      "  8 |  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+\n"+
      "  9 |  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+\n"+
      " 10 |  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+\n"+
      "";
    checkBoard(b,expectS,fill);
  }
  @Test(timeout=1000) public void toString4(){
    int rowMin=-5, rowMax=+10, colMin=-3, colMax=8;
    Integer fill=0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    String expectS =
      "    | -3| -2| -1|  0|  1|  2|  3|  4|  5|  6|  7|  8|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -5 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -4 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -3 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -2 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -1 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  0 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  1 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  2 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  3 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  4 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  5 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  6 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  7 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  8 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  9 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " 10 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "";
    checkBoard(b,expectS,fill);
  }
  @Test(timeout=1000) public void toString5(){
    int rowMin=0, rowMax=2, colMin=0, colMax=6;
    Integer mat [][] = {
      { 1, 2, 3, 0, 0, 3, 8, },
      { 4, 0, 5, 6, 0, 3, 8, },
      { 0, 0, 0, 0, 0, 3, 8, },
    };
    Integer fill = new Integer(0);
    SparseBoard<Integer> b = new SparseBoard<Integer>(mat, fill);
    String expectS =
      "    |  0|  1|  2|  3|  4|  5|  6|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  0 |  1|  2|  3|  0|  0|  3|  8|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  1 |  4|  0|  5|  6|  0|  3|  8|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  2 |  0|  0|  0|  0|  0|  3|  8|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "";
    checkBoard(b,expectS,fill);
  }
  @Test(timeout=1000) public void toString6(){
    int rowMin=0, rowMax=2, colMin=0, colMax=6;
    Integer mat [][] = {
      {100,  2,  3,  0,  0,  3,  8,  },
      {  4,  0,  5,  6,  0,  3,  8,  },
      {  0,  0,  0,999,  0,-13,108,  },
    };
    Integer fill = new Integer(0);
    SparseBoard<Integer> b = new SparseBoard<Integer>(mat, fill);
    String expectS =
      "    |  0|  1|  2|  3|  4|  5|  6|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  0 |100|  2|  3|  0|  0|  3|  8|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  1 |  4|  0|  5|  6|  0|  3|  8|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  2 |  0|  0|  0|999|  0|-13|108|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "";
    checkBoard(b,expectS,fill);
  }

  // Changing fill works with 2D constructor and toString
  @Test(timeout=1000) public void toString_change_fill1(){
    int rowMin=0, rowMax=2, colMin=0, colMax=6;
    Integer mat [][] = {
      {100,  2,  3,  0,  0,  3,  8,  },
      {  4,  0,  5,  6,  0,  3,  8,  },
      {  0,  0,  0,999,  0,-13,108,  },
    };
    Integer fill = new Integer(0);
    SparseBoard<Integer> b = new SparseBoard<Integer>(mat, fill);
    fill = -99;
    b.setFillElem(fill);
    String expectS =
      "    |  0|  1|  2|  3|  4|  5|  6|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  0 |100|  2|  3|-99|-99|  3|  8|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  1 |  4|-99|  5|  6|-99|  3|  8|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  2 |-99|-99|-99|999|-99|-13|108|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "";
    checkBoard(b,expectS,fill);
  }

  // IN BOUNDS SET TESTS
  @Test(timeout=1000) public void set_inbounds1(){
    int rowMin=0, rowMax=2, colMin=0, colMax=4;
    String fill = "";
    SparseBoard<String> b = new SparseBoard<String>(rowMin,rowMax,colMin,colMax,fill);
    int row,col; String elem;
    row=0; col=0; elem="A";
    b.set(row,col,elem);
    checkGet(elem, b, row, col);
    row=2; col=4; elem="B";
    b.set(row,col,elem);
    checkGet(elem, b, row, col);
    assertEquals(rowMin,b.getMinRow());
    assertEquals(rowMax,b.getMaxRow());
    assertEquals(colMin,b.getMinCol());
    assertEquals(colMax,b.getMaxCol());
  }
  @Test(timeout=1000) public void set_inbounds2(){
    int rowMin=-3, rowMax=2, colMin=0, colMax=4;
    String fill = "??";
    SparseBoard<String> b = new SparseBoard<String>(rowMin,rowMax,colMin,colMax,fill);
    int row,col; String elem;
    row=1; col=0; elem="A";
    b.set(row,col,elem);
    checkGet(elem, b, row, col);
    row=2; col=4; elem="B";
    b.set(row,col,elem);
    checkGet(elem, b, row, col);
    assertEquals(rowMin,b.getMinRow());
    assertEquals(rowMax,b.getMaxRow());
    assertEquals(colMin,b.getMinCol());
    assertEquals(colMax,b.getMaxCol());
  }
  @Test(timeout=1000) public void set_inbounds3(){
    int rowMin=-3, rowMax=2, colMin=0, colMax=4;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {1,0,1},
      {2,4,2},
    };
    applySets(sets,b);
    String expectS =
      "    |  0|  1|  2|  3|  4|\n"+
      "    +---+---+---+---+---+\n"+
      " -3 |  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      " -2 |  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      " -1 |  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      "  0 |  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      "  1 |  1|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      "  2 |  0|  0|  0|  0|  2|\n"+
      "    +---+---+---+---+---+\n"+
      "";
    checkBoard(b,expectS,fill);
  }
  @Test(timeout=1000) public void set_inbounds4(){
    int rowMin=-3, rowMax=2, colMin=0, colMax=4;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {-3,+2,+1},
      {-2,+4,+2},
      {+2,+0,+3},
      {+1,+3,+4},
      {-3,+0,+5},
    };
    applySets(sets,b);
    String expectS =
      "    |  0|  1|  2|  3|  4|\n"+
      "    +---+---+---+---+---+\n"+
      " -3 |  5|  0|  1|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      " -2 |  0|  0|  0|  0|  2|\n"+
      "    +---+---+---+---+---+\n"+
      " -1 |  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      "  0 |  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      "  1 |  0|  0|  0|  4|  0|\n"+
      "    +---+---+---+---+---+\n"+
      "  2 |  3|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      "";
    checkBoard(b,expectS,fill);
  }
  @Test(timeout=1000) public void set_inbounds5(){
    int rowMin=-7, rowMax=-2, colMin=-3, colMax=+7;
    int fill = 999;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {-4,+3,+10},
      {-2,+4,-20},
      {-6,+7,+30},
      {-4,+0,-40},
      {-7,+0,+50},
      {-7,-2,+60},
      {-6,-1,-70},
    };
    applySets(sets,b);
    String expectS =
      "    | -3| -2| -1|  0|  1|  2|  3|  4|  5|  6|  7|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -7 |999| 60|999| 50|999|999|999|999|999|999|999|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -6 |999|999|-70|999|999|999|999|999|999|999| 30|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -5 |999|999|999|999|999|999|999|999|999|999|999|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -4 |999|999|999|-40|999|999| 10|999|999|999|999|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -3 |999|999|999|999|999|999|999|999|999|999|999|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -2 |999|999|999|999|999|999|999|-20|999|999|999|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      "";
    checkBoard(b,expectS,fill);
  }

  // Cannot set elements twice, raises an exception
  @Test(timeout=1000) public void set_inbounds_exception1(){
    int rowMin=-3, rowMax=2, colMin=0, colMax=4;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {1,0,1},
      {2,4,2},
    };
    applySets(sets,b);
    String expectS =
      "    |  0|  1|  2|  3|  4|\n"+
      "    +---+---+---+---+---+\n"+
      " -3 |  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      " -2 |  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      " -1 |  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      "  0 |  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      "  1 |  1|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      "  2 |  0|  0|  0|  0|  2|\n"+
      "    +---+---+---+---+---+\n"+
      "";
    checkBoard(b,expectS,fill);
    boolean thrown = false;
    String expectMsg = "Element 1 0 already set to 1"; 
    try {
      b.set(1,0,5);
    }
    catch(RuntimeException e){
      thrown = true;
      String actualMsg = e.getMessage();
      if(!actualMsg.equals(expectMsg)){
        failFmt("\nset() exception message does not match expected.\nExpect: %s\nActual: %s\n",
                expectMsg,actualMsg);
      }
    }
    if(thrown == false){
      failFmt("\nset() should throw an exception with message:\n%s",expectMsg);
    }
    checkBoard(b,expectS,fill);
  }
  @Test(timeout=1000) public void set_inbounds_exception2(){
    int rowMin=-7, rowMax=-2, colMin=-3, colMax=+7;
    int fill = 999;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {-4,+3,+10},
      {-2,+4,-20},
      {-6,+7,+30},
      {-4,+0,-40},
      {-7,+0,+50},
      {-7,-2,+60},
      {-6,-1,-70},
    };
    applySets(sets,b);
    String expectS =
      "    | -3| -2| -1|  0|  1|  2|  3|  4|  5|  6|  7|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -7 |999| 60|999| 50|999|999|999|999|999|999|999|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -6 |999|999|-70|999|999|999|999|999|999|999| 30|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -5 |999|999|999|999|999|999|999|999|999|999|999|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -4 |999|999|999|-40|999|999| 10|999|999|999|999|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -3 |999|999|999|999|999|999|999|999|999|999|999|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -2 |999|999|999|999|999|999|999|-20|999|999|999|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      "";
    checkBoard(b,expectS,fill);
    boolean thrown = false;
    String expectMsg = "Element -7 -2 already set to 60";
    try {
      b.set(-7,-2,+65);
    }
    catch(RuntimeException e){
      thrown = true;
      String actualMsg = e.getMessage();
      if(!actualMsg.equals(expectMsg)){
        failFmt("\nset() exception message does not match expected.\nExpect: %s\nActual: %s\n",
                expectMsg,actualMsg);
      }
    }
    if(thrown == false){
      failFmt("\nset() should throw an exception with message:\n%s",expectMsg);
    }
    checkBoard(b,expectS,fill);
  }
  // In bounds set tests 2D array constructor
  @Test(timeout=1000) public void set_inbounds_2D_constructor1(){
    int rowMin=0, rowMax=2, colMin=0, colMax=6;
    Integer mat [][] = {
      { 10,  2,  3,  0,  0,  3,  8,  },
      {  4,  0,  5,  6,  0,  3,  8,  },
      {  0,  0,  0,  9,  0, 13, 12,  },
    };
    Integer fill = new Integer(0);
    SparseBoard<Integer> b = new SparseBoard<Integer>(mat, fill);
    int sets[][] = {
      {+2,+1,-1},
      {+2,+4,-2},
      {+1,+4,-3},
      {+2,+2,-4},
    };
    applySets(sets,b);
    String expectS =
      "    |  0|  1|  2|  3|  4|  5|  6|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  0 | 10|  2|  3|  0|  0|  3|  8|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  1 |  4|  0|  5|  6| -3|  3|  8|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  2 |  0| -1| -4|  9| -2| 13| 12|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "";
    checkBoard(b,expectS,fill);
  }  
  @Test(timeout=1000) public void set_inbounds_2D_constructor2(){
    Integer mat [][] = {
      { 10,  2,  3,  0,  0,  },
      {  4,  0,  5,  6,  0,  },
      {  0,  4,  5,  0,  6,  },
      {  4,  0,  6,  0,  0,  },
      {  0,  0,  0,  9,  0,  },
    };
    Integer fill = new Integer(0);
    SparseBoard<Integer> b = new SparseBoard<Integer>(mat, fill);
    int sets[][] = {
      {+0,+4,-1},
      {+4,+0,-2},
      {+4,+1,-3},
      {+2,+3,-4},
      {+5,+4,-5},
    };
    applySets(sets,b);
    String expectS =
      "    |  0|  1|  2|  3|  4|\n"+
      "    +---+---+---+---+---+\n"+
      "  0 | 10|  2|  3|  0| -1|\n"+
      "    +---+---+---+---+---+\n"+
      "  1 |  4|  0|  5|  6|  0|\n"+
      "    +---+---+---+---+---+\n"+
      "  2 |  0|  4|  5| -4|  6|\n"+
      "    +---+---+---+---+---+\n"+
      "  3 |  4|  0|  6|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      "  4 | -2| -3|  0|  9|  0|\n"+
      "    +---+---+---+---+---+\n"+
      "  5 |  0|  0|  0|  0| -5|\n"+
      "    +---+---+---+---+---+\n"+
      "";
    checkBoard(b,expectS,fill);
  }  

  // Should raise exceptions by trying to set elements with a non-fill
  // element even if created with the 2D array constructor
  @Test(timeout=1000) public void set_inbounds_2D_constructor_exception1(){
    int rowMin=0, rowMax=2, colMin=0, colMax=6;
    Integer mat [][] = {
      { 10,  2,  3,  0,  0,  3,  8,  },
      {  4,  0,  5,  6,  0,  3,  8,  },
      {  0,  0,  0,  9,  0, 13, 12,  },
    };
    Integer fill = new Integer(0);
    SparseBoard<Integer> b = new SparseBoard<Integer>(mat, fill);
    int sets[][] = {
    };
    applySets(sets,b);
    String expectS =
      "    |  0|  1|  2|  3|  4|  5|  6|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  0 | 10|  2|  3|  0|  0|  3|  8|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  1 |  4|  0|  5|  6|  0|  3|  8|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  2 |  0|  0|  0|  9|  0| 13| 12|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "";
    checkBoard(b,expectS,fill);
    boolean thrown = false;
    String expectMsg = "Element 1 2 already set to 5";
    try {
      b.set(+1,+2,-100);
    }
    catch(RuntimeException e){
      thrown = true;
      String actualMsg = e.getMessage();
      if(!actualMsg.equals(expectMsg)){
        failFmt("\nset() exception message does not match expected.\nExpect: %s\nActual: %s\n",
                expectMsg,actualMsg);
      }
    }
    if(thrown == false){
      failFmt("\nset() should throw an exception with message:\n%s",expectMsg);
    }
    checkBoard(b,expectS,fill);
  }  
  @Test(timeout=1000) public void set_inbounds_2D_constructor_exception2(){
    int rowMin=0, rowMax=2, colMin=0, colMax=6;
    Integer mat [][] = {
      { 10,  2,  3,  0,  0,  3,  8,  },
      {  4,  0,  5,  6,  0,  3,  8,  },
      {  0,  0,  0,  9,  0, 13, 12,  },
    };
    Integer fill = new Integer(0);
    SparseBoard<Integer> b = new SparseBoard<Integer>(mat, fill);
    int sets[][] = {
      {+2,+1,-1},
      {+2,+4,-2},
      {+1,+4,-3},
      {+2,+2,-4},
    };
    applySets(sets,b);
    String expectS =
      "    |  0|  1|  2|  3|  4|  5|  6|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  0 | 10|  2|  3|  0|  0|  3|  8|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  1 |  4|  0|  5|  6| -3|  3|  8|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  2 |  0| -1| -4|  9| -2| 13| 12|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "";
    checkBoard(b,expectS,fill);
    boolean thrown = false;
    String expectMsg = "Element 1 4 already set to -3";
    try {
      b.set(+1,+4,-100);
    }
    catch(RuntimeException e){
      thrown = true;
      String actualMsg = e.getMessage();
      if(!actualMsg.equals(expectMsg)){
        failFmt("\nset() exception message does not match expected.\nExpect: %s\nActual: %s\n",
                expectMsg,actualMsg);
      }
    }
    if(thrown == false){
      failFmt("\nset() should throw an exception with message:\n%s",expectMsg);
    }
    checkBoard(b,expectS,fill);
  }  

  // Set to null throws exception
  @Test(timeout=1000) public void set_null1(){
    int rowMin=-7, rowMax=-2, colMin=-3, colMax=+7;
    int fill = 999;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {-4,+3,+10},
      {-2,+4,-20},
      {-6,+7,+30},
      {-4,+0,-40},
      {-7,+0,+50},
      {-7,-2,+60},
      {-6,-1,-70},
    };
    applySets(sets,b);
    String expectS =
      "    | -3| -2| -1|  0|  1|  2|  3|  4|  5|  6|  7|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -7 |999| 60|999| 50|999|999|999|999|999|999|999|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -6 |999|999|-70|999|999|999|999|999|999|999| 30|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -5 |999|999|999|999|999|999|999|999|999|999|999|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -4 |999|999|999|-40|999|999| 10|999|999|999|999|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -3 |999|999|999|999|999|999|999|999|999|999|999|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -2 |999|999|999|999|999|999|999|-20|999|999|999|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      "";
    checkBoard(b,expectS,fill);
    boolean thrown = false;
    String expectMsg = "Cannot set elements to null";
    try {
      b.set(-2,-3,null);
    }
    catch(RuntimeException e){
      thrown = true;
      String actualMsg = e.getMessage();
      if(!actualMsg.equals(expectMsg)){
        failFmt("\nset() exception message does not match expected.\nExpect: %s\nActual: %s\n",
                expectMsg,actualMsg);
      }
    }
    if(thrown == false){
      failFmt("\nset() should throw an exception with message:\n%s",expectMsg);
    }
    checkBoard(b,expectS,fill);
  }
  @Test(timeout=1000) public void set_null2(){
    int fill = -1;
    SparseBoard<Integer> b = new SparseBoard<Integer>(fill);
    String expectS =
      "    |  0|\n"+
      "    +---+\n"+
      "  0 | -1|\n"+
      "    +---+\n"+
      "";
    checkBoard(b,expectS,fill);
    boolean thrown = false;
    String expectMsg = "Cannot set elements to null";
    try {
      b.set(0,0,null);
    }
    catch(RuntimeException e){
      thrown = true;
      String actualMsg = e.getMessage();
      if(!actualMsg.equals(expectMsg)){
        failFmt("\nset() exception message does not match expected.\nExpect: %s\nActual: %s\n",
                expectMsg,actualMsg);
      }
    }
    if(thrown == false){
      failFmt("\nset() should throw an exception with message:\n%s",expectMsg);
    }
    checkBoard(b,expectS,fill);
  }

  // Setting in simple constructed board is the same as previous test
  @Test(timeout=1000) public void set_inbounds_simpleConstructor1(){
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(fill);
    int sets[][] = {
      {0,0,10},
    };
    applySets(sets,b);
    String expectS =
      "    |  0|\n"+
      "    +---+\n"+
      "  0 | 10|\n"+
      "    +---+\n"+
      "";
    checkBoard(b,expectS,fill);

    boolean thrown = false;
    String expectMsg = "Element 0 0 already set to 10";
    try {
      b.set(0,0,20);
    }
    catch(RuntimeException e){
      thrown = true;
      String actualMsg = e.getMessage();
      if(!actualMsg.equals(expectMsg)){
        failFmt("\nset() exception message does not match expected.\nExpect: %s\nActual: %s\n",
                expectMsg,actualMsg);
      }
    }
    if(thrown == false){
      failFmt("\nset() should throw an exception with message:\n%s",expectMsg);
    }
    checkBoard(b,expectS,fill);
  }

  // Set to fill element does not change elements
  @Test(timeout=1000) public void set_inbounds_fill1(){
    int rowMin=-3, rowMax=2, colMin=0, colMax=4;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {-3,+2,fill},
      {-2,+4,fill},
      {+2,+0,fill},
      {+1,+3,fill},
      {-3,+0,fill},
    };
    applySets(sets,b);
    String expectS =
      "    |  0|  1|  2|  3|  4|\n"+
      "    +---+---+---+---+---+\n"+
      " -3 |  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      " -2 |  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      " -1 |  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      "  0 |  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      "  1 |  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      "  2 |  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      "";
    checkBoard(b,expectS,fill);
  }
  @Test(timeout=1000) public void set_inbounds_fill2(){
    int rowMin=+3, rowMax=+9, colMin=+2, colMax=6;
    String fill = "??";
    SparseBoard<String> b = new SparseBoard<String>(rowMin,rowMax,colMin,colMax,fill);
    b.set(4,4,fill);
    b.set(3,5,fill);
    b.set(9,6,fill);
    String expectS =
      "    |  2|  3|  4|  5|  6|\n"+
      "    +---+---+---+---+---+\n"+
      "  3 | ??| ??| ??| ??| ??|\n"+
      "    +---+---+---+---+---+\n"+
      "  4 | ??| ??| ??| ??| ??|\n"+
      "    +---+---+---+---+---+\n"+
      "  5 | ??| ??| ??| ??| ??|\n"+
      "    +---+---+---+---+---+\n"+
      "  6 | ??| ??| ??| ??| ??|\n"+
      "    +---+---+---+---+---+\n"+
      "  7 | ??| ??| ??| ??| ??|\n"+
      "    +---+---+---+---+---+\n"+
      "  8 | ??| ??| ??| ??| ??|\n"+
      "    +---+---+---+---+---+\n"+
      "  9 | ??| ??| ??| ??| ??|\n"+
      "    +---+---+---+---+---+\n"+
      "";
    checkBoard(b,expectS,fill);
  }
  @Test(timeout=1000) public void set_inbounds_fill3(){
    int rowMin=+3, rowMax=+9, colMin=+2, colMax=6;
    String fill = "??";
    SparseBoard<String> b = new SparseBoard<String>(rowMin,rowMax,colMin,colMax,fill);
    b.set(4,4,fill);
    b.set(3,5,fill);
    b.set(9,6,fill);
    String expectS =
      "    |  2|  3|  4|  5|  6|\n"+
      "    +---+---+---+---+---+\n"+
      "  3 | ??| ??| ??| ??| ??|\n"+
      "    +---+---+---+---+---+\n"+
      "  4 | ??| ??| ??| ??| ??|\n"+
      "    +---+---+---+---+---+\n"+
      "  5 | ??| ??| ??| ??| ??|\n"+
      "    +---+---+---+---+---+\n"+
      "  6 | ??| ??| ??| ??| ??|\n"+
      "    +---+---+---+---+---+\n"+
      "  7 | ??| ??| ??| ??| ??|\n"+
      "    +---+---+---+---+---+\n"+
      "  8 | ??| ??| ??| ??| ??|\n"+
      "    +---+---+---+---+---+\n"+
      "  9 | ??| ??| ??| ??| ??|\n"+
      "    +---+---+---+---+---+\n"+
      "";
    checkBoard(b,expectS,fill);
    fill = ".";
    b.setFillElem(fill);
    expectS = 
      "    |  2|  3|  4|  5|  6|\n"+
      "    +---+---+---+---+---+\n"+
      "  3 |  .|  .|  .|  .|  .|\n"+
      "    +---+---+---+---+---+\n"+
      "  4 |  .|  .|  .|  .|  .|\n"+
      "    +---+---+---+---+---+\n"+
      "  5 |  .|  .|  .|  .|  .|\n"+
      "    +---+---+---+---+---+\n"+
      "  6 |  .|  .|  .|  .|  .|\n"+
      "    +---+---+---+---+---+\n"+
      "  7 |  .|  .|  .|  .|  .|\n"+
      "    +---+---+---+---+---+\n"+
      "  8 |  .|  .|  .|  .|  .|\n"+
      "    +---+---+---+---+---+\n"+
      "  9 |  .|  .|  .|  .|  .|\n"+
      "    +---+---+---+---+---+\n"+
      "";
    checkBoard(b,expectS,fill);
  }

  // Test to ensure actual deep equality is used
  @Test(timeout=1000) public void set_inbounds_deep_equals(){
    int rowMin=+3, rowMax=+9, colMin=+2, colMax=6;
    String fill = new String("0");
    SparseBoard<Object> b = new SparseBoard<Object>(rowMin,rowMax,colMin,colMax,fill);
    Integer zero = new Integer(0);
    b.set(4,4,zero);
    String expectS =
      "    |  2|  3|  4|  5|  6|\n"+
      "    +---+---+---+---+---+\n"+
      "  3 |  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      "  4 |  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      "  5 |  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      "  6 |  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      "  7 |  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      "  8 |  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      "  9 |  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      "";
    checkBoard(b,expectS,fill);
    Integer elem = (Integer) b.get(4,4);
    assertEquals("Retrieved element does not match expected",zero,elem);
    fill = "~~";
    b.setFillElem(fill);
    expectS =
      "    |  2|  3|  4|  5|  6|\n"+
      "    +---+---+---+---+---+\n"+
      "  3 | ~~| ~~| ~~| ~~| ~~|\n"+
      "    +---+---+---+---+---+\n"+
      "  4 | ~~| ~~|  0| ~~| ~~|\n"+
      "    +---+---+---+---+---+\n"+
      "  5 | ~~| ~~| ~~| ~~| ~~|\n"+
      "    +---+---+---+---+---+\n"+
      "  6 | ~~| ~~| ~~| ~~| ~~|\n"+
      "    +---+---+---+---+---+\n"+
      "  7 | ~~| ~~| ~~| ~~| ~~|\n"+
      "    +---+---+---+---+---+\n"+
      "  8 | ~~| ~~| ~~| ~~| ~~|\n"+
      "    +---+---+---+---+---+\n"+
      "  9 | ~~| ~~| ~~| ~~| ~~|\n"+
      "    +---+---+---+---+---+\n"+
      "";  
    checkBoard(b,expectS,fill);
  }

  // SET TESTS WHICH EXPAND

  // 1 directional expansions
  @Test(timeout=1000) public void set_expand_one_direction1(){
    Integer fill = -11;
    SparseBoard<Integer> b = new SparseBoard<Integer>(fill);
    int sets[][] = {
      {+1,+0,100},
    };
    applySets(sets,b);
    String expectS =
      "    |  0|\n"+
      "    +---+\n"+
      "  0 |-11|\n"+
      "    +---+\n"+
      "  1 |100|\n"+
      "    +---+\n"+
      "";
    int eRowMin=0, eRowMax=1, eColMin=0, eColMax=0;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void set_expand_one_direction2(){
    Integer fill = -11;
    SparseBoard<Integer> b = new SparseBoard<Integer>(fill);
    int sets[][] = {
      {+4,+0,100},
    };
    applySets(sets,b);
    String expectS =
      "    |  0|\n"+
      "    +---+\n"+
      "  0 |-11|\n"+
      "    +---+\n"+
      "  1 |-11|\n"+
      "    +---+\n"+
      "  2 |-11|\n"+
      "    +---+\n"+
      "  3 |-11|\n"+
      "    +---+\n"+
      "  4 |100|\n"+
      "    +---+\n"+
      "";
    int eRowMin=0, eRowMax=4, eColMin=0, eColMax=0;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void set_expand_one_direction3(){
    Integer fill = -11;
    SparseBoard<Integer> b = new SparseBoard<Integer>(fill);
    int sets[][] = {
      {+0,+1,100},
    };
    applySets(sets,b);
    String expectS =
      "    |  0|  1|\n"+
      "    +---+---+\n"+
      "  0 |-11|100|\n"+
      "    +---+---+\n"+
      "";
    int eRowMin=0, eRowMax=0, eColMin=0, eColMax=1;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void set_expand_one_direction4(){
    Integer fill = -11;
    SparseBoard<Integer> b = new SparseBoard<Integer>(fill);
    int sets[][] = {
      {+0,+8,100},
    };
    applySets(sets,b);
    String expectS =
      "    |  0|  1|  2|  3|  4|  5|  6|  7|  8|\n"+
      "    +---+---+---+---+---+---+---+---+---+\n"+
      "  0 |-11|-11|-11|-11|-11|-11|-11|-11|100|\n"+
      "    +---+---+---+---+---+---+---+---+---+\n"+
      "";
    int eRowMin=0, eRowMax=0, eColMin=0, eColMax=8;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void set_expand_one_direction5(){
    int rowMin=-3, rowMax=-3, colMin=+2, colMax=+2;
    Integer fill = -11;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {-2,+2,100},
    };
    applySets(sets,b);
    String expectS =
      "    |  2|\n"+
      "    +---+\n"+
      " -3 |-11|\n"+
      "    +---+\n"+
      " -2 |100|\n"+
      "    +---+\n"+
      "";
    int eRowMin=-3, eRowMax=-2, eColMin=2, eColMax=2;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void set_expand_one_direction6(){
    int rowMin=4, rowMax=4, colMin=-5, colMax=-5;
    Integer fill = -11;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {10,-5,100},
    };
    applySets(sets,b);
    String expectS =
      "    | -5|\n"+
      "    +---+\n"+
      "  4 |-11|\n"+
      "    +---+\n"+
      "  5 |-11|\n"+
      "    +---+\n"+
      "  6 |-11|\n"+
      "    +---+\n"+
      "  7 |-11|\n"+
      "    +---+\n"+
      "  8 |-11|\n"+
      "    +---+\n"+
      "  9 |-11|\n"+
      "    +---+\n"+
      " 10 |100|\n"+
      "    +---+\n"+
      "";
    int eRowMin=4, eRowMax=10, eColMin=-5, eColMax=-5;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void set_expand_one_direction7(){
    int rowMin=4, rowMax=7, colMin=-5, colMax=-4;
    Integer fill = -11;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {+4,-3,100},
    };
    applySets(sets,b);
    String expectS =
      "    | -5| -4| -3|\n"+
      "    +---+---+---+\n"+
      "  4 |-11|-11|100|\n"+
      "    +---+---+---+\n"+
      "  5 |-11|-11|-11|\n"+
      "    +---+---+---+\n"+
      "  6 |-11|-11|-11|\n"+
      "    +---+---+---+\n"+
      "  7 |-11|-11|-11|\n"+
      "    +---+---+---+\n"+
      "";
    int eRowMin=4, eRowMax=7, eColMin=-5, eColMax=-3;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void set_expand_one_direction8(){
    int rowMin=-1, rowMax=1, colMin=-2, colMax=-1;
    Integer fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {+1,+4,111},
    };
    applySets(sets,b);
    String expectS =
      "    | -2| -1|  0|  1|  2|  3|  4|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      " -1 |  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  0 |  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  1 |  0|  0|  0|  0|  0|  0|111|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "";
    int eRowMin=-1, eRowMax=1, eColMin=-2, eColMax=+4;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void set_expand_one_direction9(){
    int rowMin=-2, rowMax=1, colMin=-2, colMax=3;
    Integer fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {+5,+2,111},
    };
    applySets(sets,b);
    String expectS =
      "    | -2| -1|  0|  1|  2|  3|\n"+
      "    +---+---+---+---+---+---+\n"+
      " -2 |  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      " -1 |  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      "  0 |  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      "  1 |  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      "  2 |  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      "  3 |  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      "  4 |  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      "  5 |  0|  0|  0|  0|111|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      "";
    int eRowMin=-2, eRowMax=5, eColMin=-2, eColMax=+3;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void set_expand_one_direction10(){
    int rowMin=-2, rowMax=1, colMin=-2, colMax=0;
    Integer fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {+3,+0,111},
      {+2,+5,222},
      {+3,+8,333},
      {+6,+0,444},
    };
    applySets(sets,b);
    String expectS =
      "    | -2| -1|  0|  1|  2|  3|  4|  5|  6|  7|  8|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -2 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -1 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  0 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  1 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  2 |  0|  0|  0|  0|  0|  0|  0|222|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  3 |  0|  0|111|  0|  0|  0|  0|  0|  0|  0|333|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  4 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  5 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  6 |  0|  0|444|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      "";
    int eRowMin=-2, eRowMax=6, eColMin=-2, eColMax=8;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void set_expand_one_direction11(){
    int rowMin=0, rowMax=0, colMin=0, colMax=0;
    Integer fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {-1,0,111},
    };
    applySets(sets,b);
    String expectS =
      "    |  0|\n"+
      "    +---+\n"+
      " -1 |111|\n"+
      "    +---+\n"+
      "  0 |  0|\n"+
      "    +---+\n"+
      "";
    int eRowMin=-1, eRowMax=0, eColMin=0, eColMax=0;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void set_expand_one_direction12(){
    int rowMin=+2, rowMax=+2, colMin=+5, colMax=+5;
    Integer fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {-1,5,111},
    };
    applySets(sets,b);
    String expectS =
      "    |  5|\n"+
      "    +---+\n"+
      " -1 |111|\n"+
      "    +---+\n"+
      "  0 |  0|\n"+
      "    +---+\n"+
      "  1 |  0|\n"+
      "    +---+\n"+
      "  2 |  0|\n"+
      "    +---+\n"+
      "";
    int eRowMin=-1, eRowMax=2, eColMin=5, eColMax=5;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void set_expand_one_direction13(){
    int rowMin=-3, rowMax=+1, colMin=0, colMax=+4;
    Integer fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {-5,2,111},
    };
    applySets(sets,b);
    String expectS =
      "    |  0|  1|  2|  3|  4|\n"+
      "    +---+---+---+---+---+\n"+
      " -5 |  0|  0|111|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      " -4 |  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      " -3 |  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      " -2 |  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      " -1 |  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      "  0 |  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      "  1 |  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      "";
    int eRowMin=-5, eRowMax=1, eColMin=0, eColMax=4;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void set_expand_one_direction14(){
    int rowMin=+1, rowMax=+1, colMin=+2, colMax=+3;
    Integer fill = -1;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {+1,+1,11},
    };
    applySets(sets,b);
    String expectS =
      "    |  1|  2|  3|\n"+
      "    +---+---+---+\n"+
      "  1 | 11| -1| -1|\n"+
      "    +---+---+---+\n"+
      "";
    int eRowMin=1, eRowMax=1, eColMin=1, eColMax=3;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void set_expand_one_direction15(){
    int rowMin=-1, rowMax=+1, colMin=+2, colMax=+3;
    Integer fill = -1;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {+0,-4,11},
    };
    applySets(sets,b);
    String expectS =
      "    | -4| -3| -2| -1|  0|  1|  2|  3|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      " -1 | -1| -1| -1| -1| -1| -1| -1| -1|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  0 | 11| -1| -1| -1| -1| -1| -1| -1|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  1 | -1| -1| -1| -1| -1| -1| -1| -1|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "";
    int eRowMin=-1, eRowMax=1, eColMin=-4, eColMax=3;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void set_expand_one_direction16(){
    int rowMin=-1, rowMax=+1, colMin=+2, colMax=+3;
    Integer fill = -1;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {+0,+0,11},
      {-3,+0,22},
      {+1,-4,33},
      {+0,+1,44},
      {-5,+0,55},
      {+1,+1,66},
    };
    applySets(sets,b);
    String expectS =
      "    | -4| -3| -2| -1|  0|  1|  2|  3|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      " -5 | -1| -1| -1| -1| 55| -1| -1| -1|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      " -4 | -1| -1| -1| -1| -1| -1| -1| -1|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      " -3 | -1| -1| -1| -1| 22| -1| -1| -1|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      " -2 | -1| -1| -1| -1| -1| -1| -1| -1|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      " -1 | -1| -1| -1| -1| -1| -1| -1| -1|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  0 | -1| -1| -1| -1| 11| 44| -1| -1|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  1 | 33| -1| -1| -1| -1| 66| -1| -1|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "";
    int eRowMin=-5, eRowMax=1, eColMin=-4, eColMax=3;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  // Mixture of expansion in all 4 directions, one direction at a time
  @Test(timeout=1000) public void set_expand_one_direction17(){
    int rowMin=-1, rowMax=+1, colMin=+2, colMax=+3;
    Integer fill = -1;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {+0,+0,11},
      {-3,+0,22},
      {+1,-4,33},
      {+1,+5,44},
      {+5,+1,55},
      {+0,+1,66},
      {-5,+0,77},
      {+1,-5,88},
      {-7,+4,99},
    };
    applySets(sets,b);
    String expectS =
      "    | -5| -4| -3| -2| -1|  0|  1|  2|  3|  4|  5|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -7 | -1| -1| -1| -1| -1| -1| -1| -1| -1| 99| -1|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -6 | -1| -1| -1| -1| -1| -1| -1| -1| -1| -1| -1|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -5 | -1| -1| -1| -1| -1| 77| -1| -1| -1| -1| -1|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -4 | -1| -1| -1| -1| -1| -1| -1| -1| -1| -1| -1|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -3 | -1| -1| -1| -1| -1| 22| -1| -1| -1| -1| -1|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -2 | -1| -1| -1| -1| -1| -1| -1| -1| -1| -1| -1|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -1 | -1| -1| -1| -1| -1| -1| -1| -1| -1| -1| -1|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  0 | -1| -1| -1| -1| -1| 11| 66| -1| -1| -1| -1|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  1 | 88| 33| -1| -1| -1| -1| -1| -1| -1| -1| 44|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  2 | -1| -1| -1| -1| -1| -1| -1| -1| -1| -1| -1|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  3 | -1| -1| -1| -1| -1| -1| -1| -1| -1| -1| -1|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  4 | -1| -1| -1| -1| -1| -1| -1| -1| -1| -1| -1|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  5 | -1| -1| -1| -1| -1| -1| 55| -1| -1| -1| -1|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      "";
    int eRowMin=-7, eRowMax=5, eColMin=-5, eColMax=5;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }

  // Expand in two directions with one move

  // Down/right
  @Test(timeout=1000) public void set_expand_two_directions1(){
    // int rowMin=-1, rowMax=+1, colMin=+2, colMax=+3;
    Integer fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(fill);
    int sets[][] = {
      {+1,+1,11},
    };
    applySets(sets,b);
    String expectS =
      "    |  0|  1|\n"+
      "    +---+---+\n"+
      "  0 |  0|  0|\n"+
      "    +---+---+\n"+
      "  1 |  0| 11|\n"+
      "    +---+---+\n"+
      "";
    int eRowMin=0, eRowMax=1, eColMin=0, eColMax=1;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void set_expand_two_directions2(){
    int rowMin=+1, rowMax=+1, colMin=-2, colMax=-2;
    Integer fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {+4,0,11},
    };
    applySets(sets,b);
    String expectS =
      "    | -2| -1|  0|\n"+
      "    +---+---+---+\n"+
      "  1 |  0|  0|  0|\n"+
      "    +---+---+---+\n"+
      "  2 |  0|  0|  0|\n"+
      "    +---+---+---+\n"+
      "  3 |  0|  0|  0|\n"+
      "    +---+---+---+\n"+
      "  4 |  0|  0| 11|\n"+
      "    +---+---+---+\n"+
      "";
    int eRowMin=1, eRowMax=4, eColMin=-2, eColMax=0;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void set_expand_two_directions3(){
    int rowMin=-2, rowMax=+1, colMin=-2, colMax=+2;
    Integer fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {+4,+8,11},
    };
    applySets(sets,b);
    String expectS =
      "    | -2| -1|  0|  1|  2|  3|  4|  5|  6|  7|  8|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -2 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -1 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  0 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  1 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  2 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  3 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  4 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0| 11|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      "";
    int eRowMin=-2, eRowMax=4, eColMin=-2, eColMax=8;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  // Up/left
  @Test(timeout=1000) public void set_expand_two_directions4(){
    int rowMin=-2, rowMax=+1, colMin=-2, colMax=+2;
    Integer fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {-4,-3,11},
    };
    applySets(sets,b);
    String expectS =
      "    | -3| -2| -1|  0|  1|  2|\n"+
      "    +---+---+---+---+---+---+\n"+
      " -4 | 11|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      " -3 |  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      " -2 |  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      " -1 |  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      "  0 |  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      "  1 |  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      "";
    int eRowMin=-4, eRowMax=1, eColMin=-3, eColMax=2;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void set_expand_two_directions5(){
    int rowMin=+2, rowMax=+5, colMin=-2, colMax=-1;
    Integer fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {-4,-6,11},
    };
    applySets(sets,b);
    String expectS =
      "    | -6| -5| -4| -3| -2| -1|\n"+
      "    +---+---+---+---+---+---+\n"+
      " -4 | 11|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      " -3 |  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      " -2 |  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      " -1 |  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      "  0 |  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      "  1 |  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      "  2 |  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      "  3 |  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      "  4 |  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      "  5 |  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      "";
    int eRowMin=-4, eRowMax=5, eColMin=-6, eColMax=-1;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  // Down/left
  @Test(timeout=1000) public void set_expand_two_directions6(){
    int rowMin=+2, rowMax=+5, colMin=-2, colMax=-1;
    Integer fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {+7,-3,11},
    };
    applySets(sets,b);
    String expectS =
      "    | -3| -2| -1|\n"+
      "    +---+---+---+\n"+
      "  2 |  0|  0|  0|\n"+
      "    +---+---+---+\n"+
      "  3 |  0|  0|  0|\n"+
      "    +---+---+---+\n"+
      "  4 |  0|  0|  0|\n"+
      "    +---+---+---+\n"+
      "  5 |  0|  0|  0|\n"+
      "    +---+---+---+\n"+
      "  6 |  0|  0|  0|\n"+
      "    +---+---+---+\n"+
      "  7 | 11|  0|  0|\n"+
      "    +---+---+---+\n"+
      "";
    int eRowMin=+2, eRowMax=+7, eColMin=-3, eColMax=-1;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void set_expand_two_directions7(){
    int rowMin=-2, rowMax=+3, colMin=-1, colMax=+1;
    Integer fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {+7,-4,11},
    };
    applySets(sets,b);
    String expectS =
      "    | -4| -3| -2| -1|  0|  1|\n"+
      "    +---+---+---+---+---+---+\n"+
      " -2 |  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      " -1 |  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      "  0 |  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      "  1 |  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      "  2 |  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      "  3 |  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      "  4 |  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      "  5 |  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      "  6 |  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      "  7 | 11|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      "";
    int eRowMin=-2, eRowMax=+7, eColMin=-4, eColMax=+1;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  // Up/right
  @Test(timeout=1000) public void set_expand_two_directions8(){
    int rowMin=-1, rowMax=0, colMin=+4, colMax=+6;
    Integer fill = 1;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {-4,+7,22},
    };
    applySets(sets,b);
    String expectS =
      "    |  4|  5|  6|  7|\n"+
      "    +---+---+---+---+\n"+
      " -4 |  1|  1|  1| 22|\n"+
      "    +---+---+---+---+\n"+
      " -3 |  1|  1|  1|  1|\n"+
      "    +---+---+---+---+\n"+
      " -2 |  1|  1|  1|  1|\n"+
      "    +---+---+---+---+\n"+
      " -1 |  1|  1|  1|  1|\n"+
      "    +---+---+---+---+\n"+
      "  0 |  1|  1|  1|  1|\n"+
      "    +---+---+---+---+\n"+
      "";
    int eRowMin=-4, eRowMax=0, eColMin=4, eColMax=7;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void set_expand_two_directions9(){
    int rowMin=-3, rowMax=+2, colMin=-3, colMax=+2;
    Integer fill = 1;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {-8,+8,22},
    };
    applySets(sets,b);
    String expectS =
      "    | -3| -2| -1|  0|  1|  2|  3|  4|  5|  6|  7|  8|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -8 |  1|  1|  1|  1|  1|  1|  1|  1|  1|  1|  1| 22|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -7 |  1|  1|  1|  1|  1|  1|  1|  1|  1|  1|  1|  1|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -6 |  1|  1|  1|  1|  1|  1|  1|  1|  1|  1|  1|  1|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -5 |  1|  1|  1|  1|  1|  1|  1|  1|  1|  1|  1|  1|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -4 |  1|  1|  1|  1|  1|  1|  1|  1|  1|  1|  1|  1|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -3 |  1|  1|  1|  1|  1|  1|  1|  1|  1|  1|  1|  1|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -2 |  1|  1|  1|  1|  1|  1|  1|  1|  1|  1|  1|  1|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -1 |  1|  1|  1|  1|  1|  1|  1|  1|  1|  1|  1|  1|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  0 |  1|  1|  1|  1|  1|  1|  1|  1|  1|  1|  1|  1|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  1 |  1|  1|  1|  1|  1|  1|  1|  1|  1|  1|  1|  1|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  2 |  1|  1|  1|  1|  1|  1|  1|  1|  1|  1|  1|  1|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "";
    int eRowMin=-8, eRowMax=+2, eColMin=-3, eColMax=8;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  // Several set/expands in a row expanding in one and two directions
  @Test(timeout=1000) public void set_expand_two_directions10(){
    int rowMin=0, rowMax=0, colMin=0, colMax=0;
    Integer fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {-2,+3,11},
      {+2,+5,22},
      {+4,-2,33},
      {-5,+0,44},
      {+4,+7,55},
    };
    applySets(sets,b);
    String expectS =
      "    | -2| -1|  0|  1|  2|  3|  4|  5|  6|  7|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+\n"+
      " -5 |  0|  0| 44|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+\n"+
      " -4 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+\n"+
      " -3 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+\n"+
      " -2 |  0|  0|  0|  0|  0| 11|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+\n"+
      " -1 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+\n"+
      "  0 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+\n"+
      "  1 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+\n"+
      "  2 |  0|  0|  0|  0|  0|  0|  0| 22|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+\n"+
      "  3 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+\n"+
      "  4 | 33|  0|  0|  0|  0|  0|  0|  0|  0| 55|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+\n"+
      "";
    int eRowMin=-5, eRowMax=+4, eColMin=-2, eColMax=7;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void set_expand_two_directions11(){
    int rowMin=-1, rowMax=0, colMin=+3, colMax=+5;
    Integer fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {-1,+3,11},
      {-4,+4,22},
      {+3,-0,33},
      {+0,+0,44},
      {+0,-2,55},
      {+5,-4,66},
      {-6,+7,77},
      {-8,-8,88},
    };
    applySets(sets,b);
    String expectS =
      "    | -8| -7| -6| -5| -4| -3| -2| -1|  0|  1|  2|  3|  4|  5|  6|  7|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -8 | 88|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -7 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -6 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0| 77|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -5 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -4 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0| 22|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -3 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -2 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -1 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0| 11|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  0 |  0|  0|  0|  0|  0|  0| 55|  0| 44|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  1 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  2 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  3 |  0|  0|  0|  0|  0|  0|  0|  0| 33|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  4 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  5 |  0|  0|  0|  0| 66|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "";
    int eRowMin=-8, eRowMax=+5, eColMin=-8, eColMax=7;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void set_expand_two_directions12(){
    int rowMin=-1, rowMax=0, colMin=+3, colMax=+5;
    Integer fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {-2,+6,11},
      {-4,+8,22},
      {-5,+2,33},
      {+1,+10,44},
      {+3,+11,55},
      {+5,+0,66},
      {+7,-2,77},
    };
    applySets(sets,b);
    String expectS =
      "    | -2| -1|  0|  1|  2|  3|  4|  5|  6|  7|  8|  9| 10| 11|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -5 |  0|  0|  0|  0| 33|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -4 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0| 22|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -3 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -2 |  0|  0|  0|  0|  0|  0|  0|  0| 11|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -1 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  0 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  1 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0| 44|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  2 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  3 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0| 55|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  4 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  5 |  0|  0| 66|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  6 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  7 | 77|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "";
    int eRowMin=-5, eRowMax=+7, eColMin=-2, eColMax=11;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void set_expand_two_directions13(){
    // int rowMin=-1, rowMax=0, colMin=+3, colMax=+5;
    Integer mat [][] = {
      {  1,  2, },
      {  0,  0, },
      {  0,  3, },
    };
    Integer fill = new Integer(0);
    SparseBoard<Integer> b = new SparseBoard<Integer>(mat, fill);
    int sets[][] = {
      {-2,+2,11},
      {+4,-1,22},
      {+5,+4,33},
      {-3,-4,44},
      {-1,-1,55},
      {+2,+0,66},
    };
    applySets(sets,b);
    String expectS =
      "    | -4| -3| -2| -1|  0|  1|  2|  3|  4|\n"+
      "    +---+---+---+---+---+---+---+---+---+\n"+
      " -3 | 44|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+\n"+
      " -2 |  0|  0|  0|  0|  0|  0| 11|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+\n"+
      " -1 |  0|  0|  0| 55|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+\n"+
      "  0 |  0|  0|  0|  0|  1|  2|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+\n"+
      "  1 |  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+\n"+
      "  2 |  0|  0|  0|  0| 66|  3|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+\n"+
      "  3 |  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+\n"+
      "  4 |  0|  0|  0| 22|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+\n"+
      "  5 |  0|  0|  0|  0|  0|  0|  0|  0| 33|\n"+
      "    +---+---+---+---+---+---+---+---+---+\n"+
      "";
    int eRowMin=-3, eRowMax=+5, eColMin=-4, eColMax=4;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }

  // Set to fill element does not change size
  @Test(timeout=1000) public void set_no_expand1(){
    int rowMin=0, rowMax=0, colMin=0, colMax=0;
    Integer fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {-8,+8, fill},
    };
    applySets(sets,b);
    String expectS =
      "    |  0|\n"+
      "    +---+\n"+
      "  0 |  0|\n"+
      "    +---+\n"+
      "";
    int eRowMin=0, eRowMax=0, eColMin=0, eColMax=0;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void set_no_expand2(){
    int rowMin=-3, rowMax=+2, colMin=+3, colMax=+5;
    Integer fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {+3,+6, fill},
    };
    applySets(sets,b);
    String expectS =
      "    |  3|  4|  5|\n"+
      "    +---+---+---+\n"+
      " -3 |  0|  0|  0|\n"+
      "    +---+---+---+\n"+
      " -2 |  0|  0|  0|\n"+
      "    +---+---+---+\n"+
      " -1 |  0|  0|  0|\n"+
      "    +---+---+---+\n"+
      "  0 |  0|  0|  0|\n"+
      "    +---+---+---+\n"+
      "  1 |  0|  0|  0|\n"+
      "    +---+---+---+\n"+
      "  2 |  0|  0|  0|\n"+
      "    +---+---+---+\n"+
      "";
    int eRowMin=-3, eRowMax=2, eColMin=3, eColMax=5;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void set_no_expand3(){
    int rowMin=-3, rowMax=+2, colMin=+3, colMax=+5;
    Integer fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {+3,+6, fill},
      {-2,+1, fill},
      {-8,+8, fill},
      {-0,+0, fill},
    };
    applySets(sets,b);
    String expectS =
      "    |  3|  4|  5|\n"+
      "    +---+---+---+\n"+
      " -3 |  0|  0|  0|\n"+
      "    +---+---+---+\n"+
      " -2 |  0|  0|  0|\n"+
      "    +---+---+---+\n"+
      " -1 |  0|  0|  0|\n"+
      "    +---+---+---+\n"+
      "  0 |  0|  0|  0|\n"+
      "    +---+---+---+\n"+
      "  1 |  0|  0|  0|\n"+
      "    +---+---+---+\n"+
      "  2 |  0|  0|  0|\n"+
      "    +---+---+---+\n"+
      "";
    int eRowMin=-3, eRowMax=2, eColMin=3, eColMax=5;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }


  // EXPAND TO INCLUDE TESTS
  // No expansion
  @Test(timeout=1000) public void expand_none1(){
    int rowMin=-3, rowMax=2, colMin=0, colMax=4;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {+1,+0,0},
      {-2,+2,0},
    };
    checkExpands(sets,b);
    String expectS =
      "    |  0|  1|  2|  3|  4|\n"+
      "    +---+---+---+---+---+\n"+
      " -3 |  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      " -2 |  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      " -1 |  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      "  0 |  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      "  1 |  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      "  2 |  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      "";
    int eRowMin=-3, eRowMax=+2, eColMin=0, eColMax=4;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void expand_none2(){
    int rowMin=0, rowMax=2, colMin=0, colMax=1;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {0,0,0},
      {2,1,0},
    };
    checkExpands(sets,b);
    String expectS =
      "    |  0|  1|\n"+
      "    +---+---+\n"+
      "  0 |  0|  0|\n"+
      "    +---+---+\n"+
      "  1 |  0|  0|\n"+
      "    +---+---+\n"+
      "  2 |  0|  0|\n"+
      "    +---+---+\n"+
      "";
    int eRowMin=0, eRowMax=+2, eColMin=0, eColMax=1;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void expand_none3(){
    int rowMin=-1, rowMax=4, colMin=-3, colMax=+3;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {0,0,0},
      {2,1,0},
      {-1,+3,0},
      {4,3,0},
      {4,-3,0},
      {-1,-3,0},
    };
    checkExpands(sets,b);
    String expectS =
      "    | -3| -2| -1|  0|  1|  2|  3|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      " -1 |  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  0 |  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  1 |  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  2 |  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  3 |  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  4 |  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "";
    int eRowMin=-1, eRowMax=+4, eColMin=-3, eColMax=3;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void expand_none4(){
    int rowMin=0, rowMax=2, colMin=0, colMax=6;
    Integer mat [][] = {
      { 10,  2,  3,  0,  0,  3,  8,  },
      {  4,  0,  5,  6,  0,  3,  8,  },
      {  0,  0,  0,  9,  0, 13, 12,  },
    };
    Integer fill = new Integer(0);
    SparseBoard<Integer> b = new SparseBoard<Integer>(mat, fill);
    int sets[][] = {
      {0,0,0},
      {2,1,0},
      {+1,+6,0},
    };
    checkExpands(sets,b);
    String expectS =
      "    |  0|  1|  2|  3|  4|  5|  6|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  0 | 10|  2|  3|  0|  0|  3|  8|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  1 |  4|  0|  5|  6|  0|  3|  8|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  2 |  0|  0|  0|  9|  0| 13| 12|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "";
    int eRowMin=0, eRowMax=+2, eColMin=0, eColMax=6;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }

  // Expand some
  @Test(timeout=1000) public void expand_some1(){
    int rowMin=0, rowMax=0, colMin=0, colMax=0;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {1,0,0},
      {0,1,0},
    };
    checkExpands(sets,b);
    String expectS =
      "    |  0|  1|\n"+
      "    +---+---+\n"+
      "  0 |  0|  0|\n"+
      "    +---+---+\n"+
      "  1 |  0|  0|\n"+
      "    +---+---+\n"+
      "";
    int eRowMin=0, eRowMax=+1, eColMin=-0, eColMax=1;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void expand_some2(){
    int rowMin=-1, rowMax=0, colMin=-2, colMax=+1;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {1,0,0},
      {-2,-3,0},
    };
    checkExpands(sets,b);
    String expectS =
      "    | -3| -2| -1|  0|  1|\n"+
      "    +---+---+---+---+---+\n"+
      " -2 |  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      " -1 |  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      "  0 |  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      "  1 |  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      "";
    int eRowMin=-2, eRowMax=+1, eColMin=-3, eColMax=1;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void expand_some3(){
    int rowMin=-2, rowMax=+1, colMin=-1, colMax=+4;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {1,0,0},
      {0,-3,0},
      {+2,+7,0},
    };
    checkExpands(sets,b);
    String expectS =
      "    | -3| -2| -1|  0|  1|  2|  3|  4|  5|  6|  7|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -2 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -1 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  0 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  1 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  2 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+\n"+
      "";
    int eRowMin=-2, eRowMax=+2, eColMin=-3, eColMax=7;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void expand_some4(){
    int rowMin=-1, rowMax=+1, colMin=-1, colMax=+1;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {+2,+3,0},
      {-3,-3,0},
      {+3,-5,0},
      {-5,+6,0},
    };
    checkExpands(sets,b);
    String expectS =
      "    | -5| -4| -3| -2| -1|  0|  1|  2|  3|  4|  5|  6|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -5 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -4 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -3 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -2 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -1 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  0 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  1 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  2 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  3 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "";
    int eRowMin=-5, eRowMax=+3, eColMin=-5, eColMax=6;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void expand_some5(){
    Integer mat [][] = {
      { 10,  2,  3,  0,  0,  3,  8,  },
      {  4,  0,  5,  6,  0,  3,  8,  },
      {  0,  0,  0,  9,  0, 13, 12,  },
    };
    Integer fill = new Integer(0);
    SparseBoard<Integer> b = new SparseBoard<Integer>(mat, fill);
    int sets[][] = {
      {-1,+0,0},
      {-2,-1,0},
      {+5,-3,0},
    };
    checkExpands(sets,b);
    String expectS =
      "    | -3| -2| -1|  0|  1|  2|  3|  4|  5|  6|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+\n"+
      " -2 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+\n"+
      " -1 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+\n"+
      "  0 |  0|  0|  0| 10|  2|  3|  0|  0|  3|  8|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+\n"+
      "  1 |  0|  0|  0|  4|  0|  5|  6|  0|  3|  8|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+\n"+
      "  2 |  0|  0|  0|  0|  0|  0|  9|  0| 13| 12|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+\n"+
      "  3 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+\n"+
      "  4 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+\n"+
      "  5 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+\n"+
      "";
    int eRowMin=-2, eRowMax=+5, eColMin=-3, eColMax=6;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }

  // Test whether 2D array constructor produces proper longest sequence
  @Test(timeout=1000) public void longest_seq_2d_constructor1(){
    Integer fill = new Integer(0);
    Integer mat [][] = {
      {  0,  2,  2,  0,  0,  3,  8,  },
      {  4,  0,  5,  5,  5,  3,  8,  },
      {  0,  0,  0,  9,  0, 13, 12,  },
    };
    String expect = "[(1,2,5), (1,3,5), (1,4,5)]";
    SparseBoard<Integer> b = new SparseBoard<Integer>(mat, fill);
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void longest_seq_2d_constructor2(){
    Integer fill = new Integer(-1);
    Integer mat [][] = {
      { -1,  2,  2,  9, -1,  3,  8,  },
      {  4, -1,  5,  9,  5, 13,  8,  },
      { -1, -1, -1,  9, -1, 13, 12,  },
      { -1, -1, -1,  9, -1, 13, 12,  },
    };
    String expect = "[(0,3,9), (1,3,9), (2,3,9), (3,3,9)]";
    SparseBoard<Integer> b = new SparseBoard<Integer>(mat, fill);
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void longest_seq_2d_constructor4(){
    Integer fill = new Integer(-1);
    Integer mat [][] = {
      { -1,  2,  2,  7, -1,  3,  8,  },
      {  4, -1,  7,  9,  5, 13,  8,  },
      { -1,  7, -1,  9, -1, 13, 12,  },
      {  7, -1, -1,  9, -1, 13, 12,  },
    };
    String expect = "[(0,3,7), (1,2,7), (2,1,7), (3,0,7)]";
    SparseBoard<Integer> b = new SparseBoard<Integer>(mat, fill);
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void longest_seq_2d_constructor5(){
    Integer fill = new Integer(-1);
    Integer mat [][] = {
      { -1,  2,  2,  7, -1,  3,  8,  },
      {  4, -1,  7,  2,  5, 13,  8,  },
      { -1,  7, -1,  9,  2, 13, 12,  },
      { -1, -1, -1,  9, -1,  2, 12,  },
      { -1, -1, -1,  9, -1, 13,  2,  },
    };
    String expect = "[(0,2,2), (1,3,2), (2,4,2), (3,5,2), (4,6,2)]";
    SparseBoard<Integer> b = new SparseBoard<Integer>(mat, fill);
    checkLongestSequence(b,expect);
  }

  // Fill-only board should produce empty list for longest sequence
  @Test(timeout=1000) public void longest_empty1(){
    Integer fill = new Integer(-1);
    Integer mat [][] = {
      { -1, -1, -1, },
      { -1, -1, -1, },
      { -1, -1, -1, },
      { -1, -1, -1, },
      { -1, -1, -1, },
    };
    String expect = "[]";
    SparseBoard<Integer> b = new SparseBoard<Integer>(mat, fill);
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void longest_empty2(){
    Integer fill = new Integer(-1);
    SparseBoard<Integer> b = new SparseBoard<Integer>(fill);
    String expect = "[]";
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void longest_empty3(){
    int rowMin=-1, rowMax=+1, colMin=+1, colMax=+5;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    String expect = "[]";
    checkLongestSequence(b,expect);
  }

  // Set + longest sequence determination

  // Single element longest sequences
  @Test(timeout=1000) public void set_longest_sequence_single_01(){
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(fill);
    int sets[][] = {
      {-0,+0, 1},
    };
    applySets(sets,b);
    String expect = "[(0,0,1)]";
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void set_longest_sequence_single_02(){
    int rowMin=0, rowMax=0, colMin=0, colMax=0;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {-0,+0, 1},
    };
    applySets(sets,b);
    String expect = "[(0,0,1)]";
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void set_longest_sequence_single_03(){
    int rowMin=-1, rowMax=-1, colMin=-1, colMax=-1;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {-0,+0, 11},
    };
    applySets(sets,b);
    String expect = "[(0,0,11)]";
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void set_longest_sequence_single_04(){
    int rowMin=-1, rowMax=+1, colMin=+3, colMax=+4;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {-1,+1, 11},
    };
    applySets(sets,b);
    String expect = "[(-1,1,11)]";
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void set_longest_sequence_single_05(){
    int rowMin=-1, rowMax=+1, colMin=+3, colMax=+4;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {-1,1, 11},
    };
    applySets(sets,b);
    String expect = "[(-1,1,11)]";
    checkLongestSequence(b,expect);
  }
  // Setting another element should not change
  @Test(timeout=1000) public void set_longest_sequence_single_06(){
    int rowMin=-1, rowMax=+1, colMin=+3, colMax=+4;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {-1,1, 11},
      {+1,2, 11},
    };
    applySets(sets,b);
    String expect = "[(-1,1,11)]";
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void set_longest_sequence_single_07(){
    int rowMin=-1, rowMax=+1, colMin=+3, colMax=+4;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {-1,1, 11},
      {+1,2, 11},
      {-1,-2, 11},
    };
    applySets(sets,b);
    String expect = "[(-1,1,11)]";
    checkLongestSequence(b,expect);
  }

  // North-South Sequences
  @Test(timeout=1000) public void set_longest_sequence_NS_01(){
    int rowMin=-1, rowMax=+1, colMin=+3, colMax=+4;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {+0,+0, 11},
      {+1,+0, 11},
    };
    applySets(sets,b);
    String expect = "[(0,0,11), (1,0,11)]";
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void set_longest_sequence_NS_02(){
    int rowMin=-1, rowMax=+1, colMin=+3, colMax=+4;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {+0,+0, 11},
      {+1,+0, 11},
      {+2,+0, 11},
    };
    applySets(sets,b);
    String expect = "[(0,0,11), (1,0,11), (2,0,11)]";
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void set_longest_sequence_NS_03(){
    int rowMin=-1, rowMax=+1, colMin=+3, colMax=+4;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {+0,+0, 11},
      {+1,+0, 11},
      {+2,+0, 11},
      {-1,+0, 11},
    };applySets(sets,b);
    String expect = "[(-1,0,11), (0,0,11), (1,0,11), (2,0,11)]";
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void set_longest_sequence_NS_04(){
    int rowMin=-1, rowMax=+1, colMin=+3, colMax=+4;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {+0,+0, 11},
      {+2,+0, 11},
      {-1,+0, 11},
      {+1,+0, 11},
    };
    applySets(sets,b);
    String expect = "[(-1,0,11), (0,0,11), (1,0,11), (2,0,11)]";
    checkLongestSequence(b,expect);
  }

  // West-East Horizontal sequences
  @Test(timeout=1000) public void set_longest_sequence_WE_01(){
    int rowMin=-1, rowMax=+1, colMin=+3, colMax=+4;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {+0,+0, 11},
      {+0,+1, 11},
    };
    applySets(sets,b);
    String expect = "[(0,0,11), (0,1,11)]";
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void set_longest_sequence_WE_02(){
    int rowMin=-1, rowMax=+1, colMin=+3, colMax=+4;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {+0,+0, 11},
      {+0,-1, 11},
    };
    applySets(sets,b);
    String expect = "[(0,-1,11), (0,0,11)]";
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void set_longest_sequence_WE_03(){
    int rowMin=-1, rowMax=+1, colMin=+3, colMax=+4;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {+0,-1, 11},
      {+0,+0, 11},
      {+0,+1, 11},
      {+0,+2, 11},
    };
    applySets(sets,b);
    String expect = "[(0,-1,11), (0,0,11), (0,1,11), (0,2,11)]";
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void set_longest_sequence_WE_04(){
    int rowMin=-1, rowMax=+1, colMin=+3, colMax=+4;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {+0,+0, 11},
      {+0,+2, 11},
      {+0,-1, 11},
      {+0,+1, 11},
    };
    applySets(sets,b);
    String expect = "[(0,-1,11), (0,0,11), (0,1,11), (0,2,11)]";
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void set_longest_sequence_WE_05(){
    int rowMin=-1, rowMax=+1, colMin=+3, colMax=+4;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {+0,+0, 11},
      {+0,+2, 11},
      {+0,-1, 11},
      {+0,-2, 11},
      {+0,+1, 11},
    };
    applySets(sets,b);
    String expect = "[(0,-2,11), (0,-1,11), (0,0,11), (0,1,11), (0,2,11)]";
    checkLongestSequence(b,expect);
  }
  
  // South-West/North-East sequences
  @Test(timeout=1000) public void set_longest_sequence_SWNE_01(){
    int rowMin=+3, rowMax=+8, colMin=3, colMax=8;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {+8,+4, 11},
      {+7,+5, 11},
    };
    applySets(sets,b);
    String expect = "[(7,5,11), (8,4,11)]";
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void set_longest_sequence_SWNE_02(){
    int rowMin=+3, rowMax=+8, colMin=3, colMax=8;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {+8,+4, 11},
      {+7,+5, 11},
      {+6,+6, 11},
    };
    applySets(sets,b);
    String expect = "[(6,6,11), (7,5,11), (8,4,11)]";
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void set_longest_sequence_SWNE_03(){
    int rowMin=+3, rowMax=+8, colMin=3, colMax=8;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {+8,+4, 11},
      {+6,+6, 11},
      {+7,+5, 11},
    };
    applySets(sets,b);
    String expect = "[(6,6,11), (7,5,11), (8,4,11)]";
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void set_longest_sequence_SWNE_04(){
    int rowMin=+3, rowMax=+8, colMin=3, colMax=8;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {+7,+5, 11},
      {+8,+4, 11},
      {+6,+6, 11},
      {+9,+3, 11},
    };
    applySets(sets,b);
    String expect = "[(6,6,11), (7,5,11), (8,4,11), (9,3,11)]";
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void set_longest_sequence_SWNE_05(){
    int rowMin=-3, rowMax=-3, colMin=-6, colMax=-4;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {-5,-7, 11},
      {-4,-8, 11},
      {-6,-6, 11},
      {-3,-9, 11},
    };
    applySets(sets,b);
    String expect = "[(-6,-6,11), (-5,-7,11), (-4,-8,11), (-3,-9,11)]";
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void set_longest_sequence_SWNE_09(){
    int rowMin=-3, rowMax=-3, colMin=-6, colMax=-4;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {-4,-8, 11},
      {-6,-6, 11},
      {-3,-9, 11},
      {-5,-7, 11},
    };
    applySets(sets,b);
    String expect = "[(-6,-6,11), (-5,-7,11), (-4,-8,11), (-3,-9,11)]";
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void set_longest_sequence_SWNE_10(){
    int rowMin=-3, rowMax=-3, colMin=-6, colMax=-4;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {-4+5,-8+8, 11},
      {-6+5,-6+8, 11},
      {-3+5,-9+8, 11},
      {-5+5,-7+8, 11},
    };
    applySets(sets,b);
    String expect = "[(-1,2,11), (0,1,11), (1,0,11), (2,-1,11)]";
    checkLongestSequence(b,expect);
  }

  // North-West/South-East sequences
  @Test(timeout=1000) public void set_longest_sequence_NWSE_01(){
    int rowMin=+3, rowMax=+8, colMin=3, colMax=8;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {+4,+4, 11},
      {+5,+5, 11},
    };
    applySets(sets,b);
    String expect = "[(4,4,11), (5,5,11)]";
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void set_longest_sequence_NWSE_02(){
    int rowMin=+3, rowMax=+8, colMin=3, colMax=8;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {+4,+4, 11},
      {+3,+3, 11},
      {+6,+6, 11},
      {+5,+5, 11},
    };
    applySets(sets,b);
    String expect = "[(3,3,11), (4,4,11), (5,5,11), (6,6,11)]";
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void set_longest_sequence_NWSE_03(){
    int rowMin=+3, rowMax=+8, colMin=3, colMax=8;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {+4,+4, 11},
      {+3,+3, 11},
      {+6,+6, 11},
      {+5,+5, 11},
    };
    applySets(sets,b);
    String expect = "[(3,3,11), (4,4,11), (5,5,11), (6,6,11)]";
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void set_longest_sequence_NWSE_04(){
    int rowMin=+3, rowMax=+8, colMin=3, colMax=8;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {+4,+4, 11},
      {+3,+3, 11},
      {+6,+6, 11},
      {+5,+5, 11},
      {+2,+2, 11},
    };
    applySets(sets,b);
    String expect = "[(2,2,11), (3,3,11), (4,4,11), (5,5,11), (6,6,11)]";
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void set_longest_sequence_NWSE_05(){
    int rowMin=+3, rowMax=+8, colMin=3, colMax=8;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {+4+4,+4, 11},
      {+3+4,+3, 11},
      {+6+4,+6, 11},
      {+5+4,+5, 11},
    };
    applySets(sets,b);
    String expect = "[(7,3,11), (8,4,11), (9,5,11), (10,6,11)]";
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void set_longest_sequence_NWSE_06(){
    int rowMin=+3, rowMax=+8, colMin=3, colMax=8;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {+4+2,+4-9, 11},
      {+3+2,+3-9, 11},
      {+6+2,+6-9, 11},
      {+5+2,+5-9, 11},
    };
    applySets(sets,b);
    String expect = "[(5,-6,11), (6,-5,11), (7,-4,11), (8,-3,11)]";
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void set_longest_sequence_NWSE_07(){
    int rowMin=+3-5, rowMax=+8-5, colMin=3, colMax=8;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {+4-10,+4, 11},
      {+3-10,+3, 11},
      {+6-10,+6, 11},
      {+5-10,+5, 11},
      {+7-10,+7, 11},
    };
    applySets(sets,b);
    String expect = "[(-7,3,11), (-6,4,11), (-5,5,11), (-4,6,11), (-3,7,11)]";
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void set_longest_sequence_NWSE_08(){
    int rowMin=-1, rowMax=+4, colMin=-1, colMax=0;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {0,0, 11},
      {1,1, 11},
      {3,3, 11},
      {2,2, 11},
    };
    applySets(sets,b);
    String expect = "[(0,0,11), (1,1,11), (2,2,11), (3,3,11)]";
    checkLongestSequence(b,expect);
  }
  
  // Multiple sets, longest sequence changes
  @Test(timeout=1000) public void set_longest_sequence_changes_01(){
    int rowMin=-1, rowMax=+4, colMin=-1, colMax=0;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {-1,0, 22},
      {-1,1, 22},
      {-1,2, 22},
      {0,0, 11},
      {1,1, 11},
      {3,3, 11},
      {2,2, 11},
    };
    applySets(sets,b);
    String expect = "[(0,0,11), (1,1,11), (2,2,11), (3,3,11)]";
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void set_longest_sequence_changes_02(){
    int rowMin=-1, rowMax=+4, colMin=-1, colMax=0;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {-1,+0, 22},
      {-1,+1, 22},
      {+1,+1, 11},
      {+3,+3, 11},
      {-1,+2, 22},
      {+2,+2, 11},
      {+4,+4, 11},
      {-1,-1, 22},
      {+0,+0, 11},
    };
    applySets(sets,b);
    String expect = "[(0,0,11), (1,1,11), (2,2,11), (3,3,11), (4,4,11)]";
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void set_longest_sequence_changes_03(){
    int rowMin=-1, rowMax=+4, colMin=-1, colMax=0;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {0,0, 11},
      {5,1, 22},
      {4,1, 22},
      {0,1, 11},
    };
    applySets(sets,b);
    String expect = "[(4,1,22), (5,1,22)]";
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void set_longest_sequence_changes_04(){
    int rowMin=-1, rowMax=+4, colMin=-1, colMax=0;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {0,0, 11},
      {5,1, 22},
      {4,1, 22},
      {0,1, 11},
      {2,1, 22},
      {0,3, 11},
      {1,1, 22},
      {0,-1,11},
      {3,1, 22},
    };
    applySets(sets,b);
    String expect = "[(1,1,22), (2,1,22), (3,1,22), (4,1,22), (5,1,22)]";
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void set_longest_sequence_changes_05(){
    int rowMin=-1, rowMax=+4, colMin=-1, colMax=0;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {0,0, 11},
      {5,1, 22},
      {4,1, 22},
      {0,1, 11},
      {0,2, 22},
      {3,1, 11},
    };
    applySets(sets,b);
    String expect = "[(4,1,22), (5,1,22)]";
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void set_longest_sequence_changes_06(){
    int rowMin=-1, rowMax=+4, colMin=-1, colMax=0;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {0,0, 11},
      {5,1, 22},
      {4,1, 22},
      {0,1, 11},
      {3,2, 33},
      {4,3, 33},
      {5,4, 33},
    };
    applySets(sets,b);
    String expect = "[(3,2,33), (4,3,33), (5,4,33)]";
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void set_longest_sequence_changes_07(){
    int rowMin=-1, rowMax=+4, colMin=-1, colMax=0;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {0,0, 11},
      {5,1, 22},
      {4,1, 22},
      {0,1, 11},
      {-2,-2, 33},
      {-3,-3, 33},
      {0,2, 11},
      {-4,-4, 33},
      {3,1,22},
    };
    applySets(sets,b);
    String expect = "[(0,0,11), (0,1,11), (0,2,11)]";
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void set_longest_sequence_changes_08(){
    int rowMin=-1, rowMax=+4, colMin=-1, colMax=0;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {0,0, 11},
      {5,1, 22},
      {4,1, 22},
      {0,1, 11},
      {-1,2,11},
      {3,1, 22},
      {1,0, 11},
      {2,-1, 11},
    };
    applySets(sets,b);
    String expect = "[(-1,2,11), (0,1,11), (1,0,11), (2,-1,11)]";
    checkLongestSequence(b,expect);
  }

  // Dummy class; toString() returns Dum when displayCompareField is
  // false, returns an initialization number when true; uses deep
  // equals comparison on the comparison field to determine equality
  static class Dummy {
    public static boolean displayCompareField = false;
    int compareField;
    public Dummy(int cf){
      this.compareField = cf;
    }
    public boolean equals(Object obj){
      if(obj == null || !(obj instanceof Dummy)){
        return false;
      }
      Dummy that = (Dummy) obj;
      return this.compareField == that.compareField;
    }
    public String toString(){
      if(displayCompareField){
        return ""+this.compareField;
      }
      else{
        return "Dum";
      }
    }
  }
  
  // Ensure .equals() method is used for sequence detection, not
  // toString() methods, not shallow equals, uses Dummy class
  @Test(timeout=1000) public void set_longest_sequence_use_equals_01(){
    int rowMin=0, rowMax=+4, colMin=-1, colMax=4;
    Dummy fill = new Dummy(0);
    SparseBoard<Dummy> b = new SparseBoard<Dummy>(rowMin,rowMax,colMin,colMax,fill);

    Dummy.displayCompareField = false;
    b.set(0,0, new Dummy(11));
    b.set(0,1, new Dummy(22));
    b.set(1,0, new Dummy(11));
    Dummy.displayCompareField = true;
    String expect = "[(0,0,11), (1,0,11)]";
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void set_longest_sequence_use_equals_02(){
    int rowMin=0, rowMax=+4, colMin=-1, colMax=4;
    Dummy fill = new Dummy(0);
    SparseBoard<Dummy> b = new SparseBoard<Dummy>(rowMin,rowMax,colMin,colMax,fill);

    Dummy.displayCompareField = false;
    b.set(+0,+0, new Dummy(11));
    b.set(+0,+1, new Dummy(22));
    b.set(+1,+0, new Dummy(11));
    b.set(-1,+1, new Dummy(22));
    b.set(-2,+1, new Dummy(22));
    Dummy.displayCompareField = true;
    String expect = "[(-2,1,22), (-1,1,22), (0,1,22)]";
    checkLongestSequence(b,expect);
  }

  // 2D array constructor + set() produces proper longest sequence
  @Test(timeout=1000) public void longest_seq_sets_2dconstr_01(){
    Integer fill = new Integer(0);
    Integer mat [][] = {
      {  0,  0,  2,  2,  0,  0,  3,  8,  },
      {  0,  4,  0,  2,  5,  5,  3,  8,  },
      {  4,  0,  0,  0,  9,  0, 13, 12,  },
    };
    SparseBoard<Integer> b = new SparseBoard<Integer>(mat, fill);
    int sets[][] = {
      {+0,+1, 2},
    };
    applySets(sets,b);
    String expect = "[(0,1,2), (0,2,2), (0,3,2)]";
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void longest_seq_sets_2dconstr_02(){
    Integer fill = new Integer(0);
    Integer mat [][] = {
      {  0,  0,  2,  2,  0,  0,  3,  8,  },
      {  0,  4,  0,  2,  5,  5,  3,  8,  },
      {  4,  0,  0,  0,  9,  0, 13, 12,  },
    };
    SparseBoard<Integer> b = new SparseBoard<Integer>(mat, fill);
    int sets[][] = {
      {-1,+1, 2},
    };
    applySets(sets,b);
    String expect = "[(-1,1,2), (0,2,2), (1,3,2)]";
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void longest_seq_sets_2dconstr_03(){
    Integer fill = new Integer(0);
    Integer mat [][] = {
      {  0,  0,  2,  2,  0,  0,  3,  8,  },
      {  0,  4,  0,  2,  5,  5,  3,  8,  },
      {  4,  0,  0,  0,  9,  0, 13, 12,  },
    };
    SparseBoard<Integer> b = new SparseBoard<Integer>(mat, fill);
    int sets[][] = {
      {+3,-1, 4},
    };
    applySets(sets,b);
    String expect = "[(1,1,4), (2,0,4), (3,-1,4)]";
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void longest_seq_sets_2dconstr_04(){
    Integer fill = new Integer(0);
    Integer mat [][] = {
      {  0,  0,  2,  2,  0,  0,  3,  8,  },
      {  0,  4,  0,  2,  5,  5,  3,  8,  },
      {  4,  0,  0,  0,  9,  0, 13, 12,  },
    };
    SparseBoard<Integer> b = new SparseBoard<Integer>(mat, fill);
    int sets[][] = {
      {-1,+6, 3},
      {+3,-1, 4},
      {+2,+3, 2},
    };
    applySets(sets,b);
    String expect = "[(-1,6,3), (0,6,3), (1,6,3)]";
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void longest_seq_sets_2dconstr_05(){
    Integer fill = new Integer(0);
    Integer mat [][] = {
      {  0,  0,  2,  2,  0,  0,  3,  8,  },
      {  0,  4,  0,  2,  5,  5,  3,  8,  },
      {  4,  0,  0,  0,  9,  0, 13, 12,  },
    };
    SparseBoard<Integer> b = new SparseBoard<Integer>(mat, fill);
    int sets[][] = {
      {+3,-1, 4},
      {+2,+3, 2},
      {-1,+6, 3},
      {-1,+3, 2},
    };
    applySets(sets,b);
    String expect = "[(-1,3,2), (0,3,2), (1,3,2), (2,3,2)]";
    checkLongestSequence(b,expect);
  }


  // UNDO ONLY TESTS

  // Undo changes elements of board, doesn't change size after expands
  @Test(timeout=1000) public void undo_sets_01(){
    int rowMin=4, rowMax=4, colMin=0, colMax=0;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {+4,+0, 11},
    };
    applySets(sets,b);
    applyUndos(1, b);
    String expectS =
      "    |  0|\n"+
      "    +---+\n"+
      "  4 |  0|\n"+
      "    +---+\n"+
      "";
    int eRowMin=4, eRowMax=4, eColMin=-0, eColMax=0;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void undo_sets_02(){
    int rowMin=-1, rowMax=+3, colMin=0, colMax=3;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {+0,+0, 11},
    };
    applySets(sets,b);
    applyUndos(1, b);
    String expectS =
      "    |  0|  1|  2|  3|\n"+
      "    +---+---+---+---+\n"+
      " -1 |  0|  0|  0|  0|\n"+
      "    +---+---+---+---+\n"+
      "  0 |  0|  0|  0|  0|\n"+
      "    +---+---+---+---+\n"+
      "  1 |  0|  0|  0|  0|\n"+
      "    +---+---+---+---+\n"+
      "  2 |  0|  0|  0|  0|\n"+
      "    +---+---+---+---+\n"+
      "  3 |  0|  0|  0|  0|\n"+
      "    +---+---+---+---+\n"+
      "";
    int eRowMin=-1, eRowMax=3, eColMin=-0, eColMax=3;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void undo_sets_03(){
    int rowMin=4, rowMax=4, colMin=0, colMax=0;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {+4,+0, 11},
      {+3,+0, 22},
    };
    applySets(sets,b);
    applyUndos(1, b);
    String expectS =
      "    |  0|\n"+
      "    +---+\n"+
      "  3 |  0|\n"+
      "    +---+\n"+
      "  4 | 11|\n"+
      "    +---+\n"+
      "";
    int eRowMin=3, eRowMax=4, eColMin=0, eColMax=0;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void undo_sets_041(){
    int rowMin=4, rowMax=4, colMin=0, colMax=0;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {+4,+0, 11},
      {+3,+0, 22},
    };
    applySets(sets,b);
    applyUndos(2, b);
    String expectS =
      "    |  0|\n"+
      "    +---+\n"+
      "  3 |  0|\n"+
      "    +---+\n"+
      "  4 |  0|\n"+
      "    +---+\n"+
      "";
    int eRowMin=3, eRowMax=4, eColMin=0, eColMax=0;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void undo_sets_042(){
    int rowMin=-1, rowMax=4, colMin=-2, colMax=5;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {-1,-1, 11},
      {+1,+1, 22},
      {+4,+0, 33},
    };
    applySets(sets,b);
    applyUndos(1, b);
    String expectS =
      "    | -2| -1|  0|  1|  2|  3|  4|  5|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      " -1 |  0| 11|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  0 |  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  1 |  0|  0|  0| 22|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  2 |  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  3 |  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  4 |  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "";
    int eRowMin=-1, eRowMax=4, eColMin=-2, eColMax=5;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void undo_sets_05(){
    int rowMin=-1, rowMax=4, colMin=-2, colMax=5;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {-1,-1, 11},
      {+1,+1, 22},
      {+4,+0, 33},
    };
    applySets(sets,b);
    applyUndos(2, b);
    String expectS =
      "    | -2| -1|  0|  1|  2|  3|  4|  5|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      " -1 |  0| 11|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  0 |  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  1 |  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  2 |  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  3 |  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  4 |  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "";
    int eRowMin=-1, eRowMax=4, eColMin=-2, eColMax=5;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void undo_sets_06(){
    int rowMin=-1, rowMax=4, colMin=-2, colMax=5;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {-1,-1, 11},
      {+1,+1, 22},
      {+4,+0, 33},
    };
    applySets(sets,b);
    applyUndos(3, b);
    String expectS =
      "    | -2| -1|  0|  1|  2|  3|  4|  5|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      " -1 |  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  0 |  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  1 |  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  2 |  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  3 |  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  4 |  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "";
    int eRowMin=-1, eRowMax=4, eColMin=-2, eColMax=5;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void undo_sets_07(){
    int rowMin=-1, rowMax=1, colMin=-2, colMax=+2;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {-2,-2, 11},
      {-3,-2, 22},
      {-3,-4, 33},
    };
    applySets(sets,b);
    applyUndos(2, b);
    String expectS =
      "    | -4| -3| -2| -1|  0|  1|  2|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      " -3 |  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      " -2 |  0|  0| 11|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      " -1 |  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  0 |  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  1 |  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "";
    int eRowMin=-3, eRowMax=1, eColMin=-4, eColMax=2;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void undo_sets_08(){
    int rowMin=-1, rowMax=1, colMin=-2, colMax=+2;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {-2,-6, 11},
      {-3,-2, 22},
      {-3,+3, 33},
      {+4,+5, 44},
      {+0,+0, 55},
    };
    applySets(sets,b);
    applyUndos(3, b);
    String expectS =
      "    | -6| -5| -4| -3| -2| -1|  0|  1|  2|  3|  4|  5|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -3 |  0|  0|  0|  0| 22|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -2 | 11|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -1 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  0 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  1 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  2 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  3 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  4 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "";
    int eRowMin=-3, eRowMax=4, eColMin=-6, eColMax=5;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void undo_sets_09(){
    int rowMin=-1, rowMax=1, colMin=-2, colMax=+2;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {+0,+0, 11},
      {-3,+3, 22},
      {-3,-2, 33},
      {+4,+5, 44},
      {-2,-6, 55},
      {-9,-9, 66},
      {+2,+3, 77},
      {+2,+1, 88},
      {+8,+2, 99},
    };
    applySets(sets,b);
    applyUndos(8, b);
    String expectS =
      "    | -9| -8| -7| -6| -5| -4| -3| -2| -1|  0|  1|  2|  3|  4|  5|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -9 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -8 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -7 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -6 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -5 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -4 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -3 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -2 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -1 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  0 |  0|  0|  0|  0|  0|  0|  0|  0|  0| 11|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  1 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  2 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  3 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  4 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  5 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  6 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  7 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  8 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "";
    int eRowMin=-9, eRowMax=8, eColMin=-9, eColMax=5;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  
  // Undo adjusts the longest sequence
  @Test(timeout=1000) public void undo_longest_sequence_changes_01(){
    int rowMin=-1, rowMax=+4, colMin=-1, colMax=0;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {0,0, 11},
      {5,1, 22},
      {4,1, 22},
      {0,1, 11},
      {-1,2,11},
      {3,1, 22},
      {1,0, 11},
      {2,-1, 11},
    };
    applySets(sets,b);
    applyUndos(1, b);
    String expect = "[(3,1,22), (4,1,22), (5,1,22)]";
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void undo_longest_sequence_changes_02(){
    int rowMin=-1, rowMax=+4, colMin=-1, colMax=0;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {0,0, 11},
      {5,1, 22},
      {4,1, 22},
      {0,1, 11},
      {-1,2,11},
      {3,1, 22},
      {1,0, 11},
      {2,-1, 11},
    };
    applySets(sets,b);
    applyUndos(4, b);
    String expect = "[(4,1,22), (5,1,22)]";
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void undo_longest_sequence_changes_03(){
    int rowMin=-1, rowMax=+4, colMin=-1, colMax=0;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {0,0, 11},
      {5,1, 22},
      {4,1, 22},
      {0,1, 11},
      {-1,2,11},
      {3,1, 22},
      {1,0, 11},
      {2,-1, 11},
    };
    applySets(sets,b);
    applyUndos(sets.length, b);
    String expect = "[]";
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void undo_longest_sequence_changes_04(){
    int rowMin=-3, rowMax=+2, colMin=-3, colMax=+2;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {5,1, 22},
      {-1,2,11},
      {0,1, 11},
      {0,0, 11},
      {1,0, 11},
      {3,1, 22},
      {2,-1, 11},
      {4,1, 22},
    };
    applySets(sets,b);
    applyUndos(sets.length-2, b);
    String expect = "[(5,1,22)]";
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void undo_longest_sequence_changes_05(){
    int rowMin=-3, rowMax=+2, colMin=-3, colMax=+2;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {1,1, 22},
      {-1,2,11},
      {0,1, 11},
      {0,0, 11},
      {3,1, 33},
      {4,1, 33},
      {5,1, 33},
      {1,0, 11},
      {-1,1, 22},
      {2,-1, 11},
      {3,-1, 22},
    };
    applySets(sets,b);
    applyUndos(1, b);
    String expect = "[(-1,2,11), (0,1,11), (1,0,11), (2,-1,11)]";
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void undo_longest_sequence_changes_06(){
    int rowMin=-3, rowMax=+2, colMin=-3, colMax=+2;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {1,1, 22},
      {-1,2,11},
      {0,1, 11},
      {0,0, 11},
      {3,1, 33},
      {4,1, 33},
      {5,1, 33},
      {1,0, 11},
      {-1,1, 22},
      {2,-1, 11},
      {3,-1, 22},
    };
    applySets(sets,b);
    applyUndos(5, b);
    String expect = "[(-1,2,11), (0,1,11)]";
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void undo_longest_sequence_changes_07(){
    int rowMin=-3, rowMax=+2, colMin=-3, colMax=+2;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {1,1, 22},
      {-1,2,11},
      {0,1, 11},
      {0,0, 11},
      {3,1, 33},
      {4,1, 33},
      {5,1, 33},
      {1,0, 11},
      {-1,1, 22},
      {2,-1, 11},
      {3,-1, 22},
    };
    applySets(sets,b);
    applyUndos(3, b);
    String expect = "[(3,1,33), (4,1,33), (5,1,33)]";
    checkLongestSequence(b,expect);
  }

  // UNDO+REDO TESTS

  // Undo/redo properly change board state, elements only, min/max row/col stay the same
  @Test(timeout=1000) public void undo_redo_sets_01(){
    int rowMin=4, rowMax=4, colMin=0, colMax=0;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {+4,+0, 11},
    };
    applySets(sets,b);
    applyUndos(1, b);
    applyRedos(1, b);
    String expectS =
      "    |  0|\n"+
      "    +---+\n"+
      "  4 | 11|\n"+
      "    +---+\n"+
      "";
    int eRowMin=4, eRowMax=4, eColMin=-0, eColMax=0;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void undo_redo_sets_02(){
    int rowMin=-1, rowMax=+3, colMin=0, colMax=3;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {+0,+0, 11},
    };
    applySets(sets,b);
    applyUndos(1, b);
    applyRedos(1, b);
    String expectS =
      "    |  0|  1|  2|  3|\n"+
      "    +---+---+---+---+\n"+
      " -1 |  0|  0|  0|  0|\n"+
      "    +---+---+---+---+\n"+
      "  0 | 11|  0|  0|  0|\n"+
      "    +---+---+---+---+\n"+
      "  1 |  0|  0|  0|  0|\n"+
      "    +---+---+---+---+\n"+
      "  2 |  0|  0|  0|  0|\n"+
      "    +---+---+---+---+\n"+
      "  3 |  0|  0|  0|  0|\n"+
      "    +---+---+---+---+\n"+
      "";
    int eRowMin=-1, eRowMax=3, eColMin=-0, eColMax=3;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void undo_redo_sets_03(){
    int rowMin=4, rowMax=4, colMin=0, colMax=0;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {+4,+0, 11},
      {+3,+0, 22},
    };
    applySets(sets,b);
    applyUndos(1, b);
    applyRedos(1, b);
    String expectS =
      "    |  0|\n"+
      "    +---+\n"+
      "  3 | 22|\n"+
      "    +---+\n"+
      "  4 | 11|\n"+
      "    +---+\n"+
      "";
    int eRowMin=3, eRowMax=4, eColMin=0, eColMax=0;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void undo_redo_sets_040(){
    int rowMin=-1, rowMax=4, colMin=-2, colMax=5;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {-1,-1, 11},
      {+1,+1, 22},
      {+4,+0, 33},
    };
    applySets(sets,b);
    applyUndos(1, b);
    applyRedos(1, b);
    String expectS =
      "    | -2| -1|  0|  1|  2|  3|  4|  5|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      " -1 |  0| 11|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  0 |  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  1 |  0|  0|  0| 22|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  2 |  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  3 |  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  4 |  0|  0| 33|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "";
    int eRowMin=-1, eRowMax=4, eColMin=-2, eColMax=5;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void undo_redo_sets_041(){
    int rowMin=4, rowMax=4, colMin=0, colMax=0;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {+4,+0, 11},
      {+3,+0, 22},
    };
    applySets(sets,b);
    applyUndos(2, b);
    applyRedos(2, b);
    String expectS =
      "    |  0|\n"+
      "    +---+\n"+
      "  3 | 22|\n"+
      "    +---+\n"+
      "  4 | 11|\n"+
      "    +---+\n"+
      "";
    int eRowMin=3, eRowMax=4, eColMin=0, eColMax=0;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void undo_redo_sets_042(){
    int rowMin=4, rowMax=4, colMin=0, colMax=0;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {+4,+0, 11},
      {+3,+0, 22},
    };
    applySets(sets,b);
    applyUndos(2, b);
    applyRedos(1, b);
    String expectS =
      "    |  0|\n"+
      "    +---+\n"+
      "  3 |  0|\n"+
      "    +---+\n"+
      "  4 | 11|\n"+
      "    +---+\n"+
      "";
    int eRowMin=3, eRowMax=4, eColMin=0, eColMax=0;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void undo_redo_sets_05(){
    int rowMin=-1, rowMax=4, colMin=-2, colMax=5;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {-1,-1, 11},
      {+1,+1, 22},
      {+4,+0, 33},
    };
    applySets(sets,b);
    applyUndos(2, b);
    applyRedos(1, b);
    String expectS =
      "    | -2| -1|  0|  1|  2|  3|  4|  5|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      " -1 |  0| 11|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  0 |  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  1 |  0|  0|  0| 22|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  2 |  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  3 |  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  4 |  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "";
    int eRowMin=-1, eRowMax=4, eColMin=-2, eColMax=5;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void undo_redo_sets_061(){
    int rowMin=-1, rowMax=4, colMin=-2, colMax=5;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {-1,-1, 11},
      {+1,+1, 22},
      {+4,+0, 33},
    };
    applySets(sets,b);
    applyUndos(3, b);
    applyRedos(1, b);
    String expectS =
      "    | -2| -1|  0|  1|  2|  3|  4|  5|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      " -1 |  0| 11|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  0 |  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  1 |  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  2 |  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  3 |  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  4 |  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "";
    int eRowMin=-1, eRowMax=4, eColMin=-2, eColMax=5;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void undo_redo_sets_062(){
    int rowMin=-1, rowMax=4, colMin=-2, colMax=5;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {-1,-1, 11},
      {+1,+1, 22},
      {+4,+0, 33},
    };
    applySets(sets,b);
    applyUndos(3, b);
    applyRedos(2, b);
    String expectS =
      "    | -2| -1|  0|  1|  2|  3|  4|  5|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      " -1 |  0| 11|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  0 |  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  1 |  0|  0|  0| 22|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  2 |  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  3 |  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  4 |  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "";
    int eRowMin=-1, eRowMax=4, eColMin=-2, eColMax=5;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void undo_redo_sets_063(){
    int rowMin=-1, rowMax=4, colMin=-2, colMax=5;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {-1,-1, 11},
      {+1,+1, 22},
      {+4,+0, 33},
    };
    applySets(sets,b);
    applyUndos(3, b);
    applyRedos(3, b);
    String expectS =
      "    | -2| -1|  0|  1|  2|  3|  4|  5|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      " -1 |  0| 11|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  0 |  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  1 |  0|  0|  0| 22|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  2 |  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  3 |  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  4 |  0|  0| 33|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "";
    int eRowMin=-1, eRowMax=4, eColMin=-2, eColMax=5;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void undo_redo_sets_064(){
    int rowMin=-1, rowMax=4, colMin=-2, colMax=5;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {-1,-1, 11},
      {+1,+1, 22},
      {+4,+0, 33},
    };
    applySets(sets,b);
    applyUndos(3, b);
    applyRedos(3, b);
    applyUndos(2, b);
    String expectS =
      "    | -2| -1|  0|  1|  2|  3|  4|  5|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      " -1 |  0| 11|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  0 |  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  1 |  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  2 |  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  3 |  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  4 |  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "";
    int eRowMin=-1, eRowMax=4, eColMin=-2, eColMax=5;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void undo_redo_sets_07(){
    int rowMin=-1, rowMax=1, colMin=-2, colMax=+2;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {-2,-2, 11},
      {-3,-2, 22},
      {-3,-4, 33},
    };
    applySets(sets,b);
    applyUndos(2, b);
    applyRedos(1, b);
    String expectS =
      "    | -4| -3| -2| -1|  0|  1|  2|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      " -3 |  0|  0| 22|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      " -2 |  0|  0| 11|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      " -1 |  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  0 |  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  1 |  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "";
    int eRowMin=-3, eRowMax=1, eColMin=-4, eColMax=2;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void undo_redo_sets_08(){
    int rowMin=-1, rowMax=1, colMin=-2, colMax=+2;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {-2,-6, 11},
      {-3,-2, 22},
      {-3,+3, 33},
      {+4,+5, 44},
      {+0,+0, 55},
    };
    applySets(sets,b);
    applyUndos(3, b);
    applyRedos(2, b);
    applyUndos(3, b);
    applyRedos(2, b);
    String expectS =
      "    | -6| -5| -4| -3| -2| -1|  0|  1|  2|  3|  4|  5|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -3 |  0|  0|  0|  0| 22|  0|  0|  0|  0| 33|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -2 | 11|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -1 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  0 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  1 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  2 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  3 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  4 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "";
    int eRowMin=-3, eRowMax=4, eColMin=-6, eColMax=5;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }
  @Test(timeout=1000) public void undo_redo_sets_09(){
    int rowMin=-1, rowMax=1, colMin=-2, colMax=+2;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {+0,+0, 11},
      {-3,+3, 22},
      {-3,-2, 33},
      {+4,+5, 44},
      {-2,-6, 55},
      {-9,-9, 66},
      {+2,+3, 77},
      {+2,+1, 88},
      {+8,+2, 99},
    };
    applySets(sets,b);
    applyUndos(8, b);
    applyRedos(4, b);
    applyUndos(2, b);
    String expectS =
      "    | -9| -8| -7| -6| -5| -4| -3| -2| -1|  0|  1|  2|  3|  4|  5|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -9 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -8 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -7 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -6 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -5 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -4 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -3 |  0|  0|  0|  0|  0|  0|  0| 33|  0|  0|  0|  0| 22|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -2 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      " -1 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  0 |  0|  0|  0|  0|  0|  0|  0|  0|  0| 11|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  1 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  2 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  3 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  4 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  5 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  6 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  7 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "  8 |  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+\n"+
      "";
    int eRowMin=-9, eRowMax=8, eColMin=-9, eColMax=5;
    checkBoard(b,expectS,fill,eRowMin,eRowMax,eColMin,eColMax);
  }


  // Undo/redo adjust longest sequence
  @Test(timeout=1000) public void undo_redo_longest_sequence_changes_01(){
    int rowMin=-1, rowMax=+4, colMin=-1, colMax=0;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {0,0, 11},
      {5,1, 22},
      {4,1, 22},
      {0,1, 11},
      {-1,2,11},
      {3,1, 22},
      {1,0, 11},
      {2,-1, 11},
    };
    applySets(sets,b);
    applyUndos(1, b);
    applyRedos(1, b);
    String expect = "[(-1,2,11), (0,1,11), (1,0,11), (2,-1,11)]";
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void undo_redo_longest_sequence_changes_021(){
    int rowMin=-1, rowMax=+4, colMin=-1, colMax=0;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {0,0, 11},
      {5,1, 22},
      {4,1, 22},
      {0,1, 11},
      {-1,2,11},
      {3,1, 22},
      {1,0, 11},
      {2,-1, 11},
    };
    applySets(sets,b);
    applyUndos(4, b);
    applyRedos(1, b);
    String expect = "[(4,1,22), (5,1,22)]";
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void undo_redo_longest_sequence_changes_022(){
    int rowMin=-1, rowMax=+4, colMin=-1, colMax=0;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {0,0, 11},
      {5,1, 22},
      {4,1, 22},
      {0,1, 11},
      {-1,2,11},
      {3,1, 22},
      {1,0, 11},
      {2,-1, 11},
    };
    applySets(sets,b);
    applyUndos(4, b);
    applyRedos(3, b);
    String expect = "[(3,1,22), (4,1,22), (5,1,22)]";
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void undo_redo_longest_sequence_changes_023(){
    int rowMin=-1, rowMax=+4, colMin=-1, colMax=0;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {0,0, 11},
      {5,1, 22},
      {4,1, 22},
      {0,1, 11},
      {-1,2,11},
      {3,1, 22},
      {1,0, 11},
      {2,-1, 11},
    };
    applySets(sets,b);
    applyUndos(4, b);
    applyRedos(4, b);
    String expect = "[(-1,2,11), (0,1,11), (1,0,11), (2,-1,11)]";
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void undo_redo_longest_sequence_changes_03(){
    int rowMin=-1, rowMax=+4, colMin=-1, colMax=0;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {0,0, 11},
      {5,1, 22},
      {4,1, 22},
      {0,1, 11},
      {-1,2,11},
      {3,1, 22},
      {1,0, 11},
      {2,-1, 11},
    };
    applySets(sets,b);
    applyUndos(sets.length, b);
    applyRedos(4, b);
    String expect = "[(4,1,22), (5,1,22)]";
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void undo_redo_longest_sequence_changes_04(){
    int rowMin=-3, rowMax=+2, colMin=-3, colMax=+2;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {5,1, 22},
      {-1,2,11},
      {0,1, 11},
      {0,0, 11},
      {1,0, 11},
      {3,1, 22},
      {2,-1, 11},
      {4,1, 22},
    };
    applySets(sets,b);
    applyUndos(sets.length-2, b);
    applyRedos(4, b);
    applyUndos(1, b);
    String expect = "[(-1,2,11), (0,1,11), (1,0,11)]";
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void undo_redo_longest_sequence_changes_05(){
    int rowMin=-3, rowMax=+2, colMin=-3, colMax=+2;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {1,1, 22},
      {-1,2,11},
      {0,1, 11},
      {0,0, 11},
      {3,1, 33},
      {4,1, 33},
      {5,1, 33},
      {1,0, 11},
      {-1,1, 22},
      {2,-1, 11},
      {3,-1, 22},
    };
    applySets(sets,b);
    applyUndos(1, b);
    applyRedos(1, b);
    String expect = "[(-1,2,11), (0,1,11), (1,0,11), (2,-1,11)]";
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void undo_redo_longest_sequence_changes_06(){
    int rowMin=-3, rowMax=+2, colMin=-3, colMax=+2;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {1,1, 22},
      {-1,2,11},
      {0,1, 11},
      {0,0, 11},
      {3,1, 33},
      {4,1, 33},
      {5,1, 33},
      {1,0, 11},
      {-1,1, 22},
      {2,-1, 11},
      {3,-1, 22},
    };
    applySets(sets,b);
    applyUndos(5, b);
    applyRedos(3, b);
    String expect = "[(3,1,33), (4,1,33), (5,1,33)]";
    checkLongestSequence(b,expect);
  }
  @Test(timeout=1000) public void undo_redo_longest_sequence_changes_07(){
    int rowMin=-3, rowMax=+2, colMin=-3, colMax=+2;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {1,1, 22},
      {-1,2,11},
      {0,1, 11},
      {0,0, 11},
      {3,1, 33},
      {4,1, 33},
      {5,1, 33},
      {1,0, 11},
      {-1,1, 22},
      {2,-1, 11},
      {3,-1, 22},
    };
    applySets(sets,b);
    applyUndos(6, b);
    applyRedos(2, b);
    applyUndos(3, b);
    applyRedos(1, b);
    applyUndos(2, b);
    String expect = "[(-1,2,11), (0,1,11)]";
    checkLongestSequence(b,expect);
  }

  // Undo/redo exceptions
  @Test(timeout=1000) public void undo_redo_exceptions_01(){
    int rowMin=1, rowMax=+3, colMin=-1, colMax=0;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
    };
    applySets(sets, b);
    boolean thrown = false;
    String expectMsg = "Undo history is empty";
    try {
      applyUndos(1, b);
    }
    catch(RuntimeException e){
      thrown = true;
      String actualMsg = e.getMessage();
      if(!actualMsg.equals(expectMsg)){
        failFmt("\nset() exception message does not match expected.\nExpect: %s\nActual: %s\n",
                expectMsg,actualMsg);
      }
    }
    if(thrown == false){
      failFmt("\nset() should throw an exception with message:\n%s",expectMsg);
    }
    String expectS =
      "    | -1|  0|\n"+
      "    +---+---+\n"+
      "  1 |  0|  0|\n"+
      "    +---+---+\n"+
      "  2 |  0|  0|\n"+
      "    +---+---+\n"+
      "  3 |  0|  0|\n"+
      "    +---+---+\n"+
      "";
    checkBoard(b,expectS,fill);
  }
  @Test(timeout=1000) public void undo_redo_exceptions_02(){
    int rowMin=1, rowMax=+3, colMin=-1, colMax=0;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {1,1, 11},
      {1,2, 22},
      {1,3, 33},
      {1,0, 44},
    };
    applySets(sets, b);
    boolean thrown = false;
    String expectMsg = "Undo history is empty";
    try {
      applyUndos(5, b);
    }
    catch(RuntimeException e){
      thrown = true;
      String actualMsg = e.getMessage();
      if(!actualMsg.equals(expectMsg)){
        failFmt("\nset() exception message does not match expected.\nExpect: %s\nActual: %s\n",
                expectMsg,actualMsg);
      }
    }
    if(thrown == false){
      failFmt("\nset() should throw an exception with message:\n%s",expectMsg);
    }
    String expectS =
      "    | -1|  0|  1|  2|  3|\n"+
      "    +---+---+---+---+---+\n"+
      "  1 |  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      "  2 |  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      "  3 |  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      "";
    checkBoard(b,expectS,fill);
  }
  @Test(timeout=1000) public void undo_redo_exceptions_03(){
    int rowMin=1, rowMax=+3, colMin=-1, colMax=0;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
    };
    applySets(sets, b);
    boolean thrown = false;
    String expectMsg = "Redo history is empty";
    try {
      applyRedos(1, b);
    }
    catch(RuntimeException e){
      thrown = true;
      String actualMsg = e.getMessage();
      if(!actualMsg.equals(expectMsg)){
        failFmt("\nset() exception message does not match expected.\nExpect: %s\nActual: %s\n",
                expectMsg,actualMsg);
      }
    }
    if(thrown == false){
      failFmt("\nset() should throw an exception with message:\n%s",expectMsg);
    }
    String expectS =
      "    | -1|  0|\n"+
      "    +---+---+\n"+
      "  1 |  0|  0|\n"+
      "    +---+---+\n"+
      "  2 |  0|  0|\n"+
      "    +---+---+\n"+
      "  3 |  0|  0|\n"+
      "    +---+---+\n"+
      "";
    checkBoard(b,expectS,fill);
  }
  @Test(timeout=1000) public void undo_redo_exceptions_04(){
    int rowMin=1, rowMax=+3, colMin=-1, colMax=0;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {1,1, 11},
      {1,2, 22},
      {1,3, 33},
      {1,0, 44},
    };
    applySets(sets, b);
    boolean thrown = false;
    String expectMsg = "Redo history is empty";
    try {
      applyUndos(3, b);
      applyRedos(4, b);
    }
    catch(RuntimeException e){
      thrown = true;
      String actualMsg = e.getMessage();
      if(!actualMsg.equals(expectMsg)){
        failFmt("\nset() exception message does not match expected.\nExpect: %s\nActual: %s\n",
                expectMsg,actualMsg);
      }
    }
    if(thrown == false){
      failFmt("\nset() should throw an exception with message:\n%s",expectMsg);
    }
    String expectS =
      "    | -1|  0|  1|  2|  3|\n"+
      "    +---+---+---+---+---+\n"+
      "  1 |  0| 44| 11| 22| 33|\n"+
      "    +---+---+---+---+---+\n"+
      "  2 |  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      "  3 |  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      "";
    checkBoard(b,expectS,fill);
  }
  @Test(timeout=1000) public void undo_redo_exceptions_05(){
    int rowMin=1, rowMax=+3, colMin=-1, colMax=0;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {1,1, 11},
      {1,2, 22},
      {1,3, 33},
      {1,0, 44},
    };
    applySets(sets, b);
    boolean thrown = false;
    String expectMsg = "Redo history is empty";
    try {
      applyUndos(3, b);
      applyRedos(1, b);
      b.set(0,-1,55);
      b.redoSet();
    }
    catch(RuntimeException e){
      thrown = true;
      String actualMsg = e.getMessage();
      if(!actualMsg.equals(expectMsg)){
        failFmt("\nset() exception message does not match expected.\nExpect: %s\nActual: %s\n",
                expectMsg,actualMsg);
      }
    }
    if(thrown == false){
      failFmt("\nset() should throw an exception with message:\n%s",expectMsg);
    }
    String expectS =
      "    | -1|  0|  1|  2|  3|\n"+
      "    +---+---+---+---+---+\n"+
      "  0 | 55|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      "  1 |  0|  0| 11| 22|  0|\n"+
      "    +---+---+---+---+---+\n"+
      "  2 |  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      "  3 |  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      "";
    checkBoard(b,expectS,fill);
  }

  @Test(timeout=1000) public void internal_sequences_01(){
    int rowMin=1, rowMax=+3, colMin=-1, colMax=0;
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][] = {
      {1,1, 11},
      {0,0, 22},
      {3,3, 33},
      {-2,-3,44},
    };
    applySets(sets, b);
    String expectRC = "[(-2,-3,44), (0,0,22), (1,1,11), (3,3,33)]";
    String expectCR = "[(-2,-3,44), (0,0,22), (1,1,11), (3,3,33)]";
    String expectDR = "[(-2,-3,44), (0,0,22), (1,1,11), (3,3,33)]";
    String expectAR = "[(-2,-3,44), (0,0,22), (1,1,11), (3,3,33)]";
    checkInternalSequences(b,expectRC,expectCR,expectDR,expectAR);
  }
  @Test(timeout=1000) public void internal_sequences_02(){
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(fill);
    int sets[][] = {
      {1,1, 11},
      {1,2, 22},
      {1,-1,33},
      {1,6, 44},
      {1,3, 55},
    };
    applySets(sets, b);
    String expectRC = "[(1,-1,33), (1,1,11), (1,2,22), (1,3,55), (1,6,44)]";
    String expectCR = "[(1,-1,33), (1,1,11), (1,2,22), (1,3,55), (1,6,44)]";
    String expectDR = "[(1,-1,33), (1,1,11), (1,2,22), (1,3,55), (1,6,44)]";
    String expectAR = "[(1,-1,33), (1,1,11), (1,2,22), (1,3,55), (1,6,44)]";
    checkInternalSequences(b,expectRC,expectCR,expectDR,expectAR);
  }
  @Test(timeout=1000) public void internal_sequences_03(){
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(fill);
    int sets[][] = {
      {1,1,11},
      {2,1,22},
      {2,4,33},
      {3,2,44},
      {3,3,55},
      {3,4,66},
      {0,2,77},
      {1,4,88},
      {0,5,99},
    };
    applySets(sets, b);
    String expectRC = "[(0,2,77), (0,5,99), (1,1,11), (1,4,88), (2,1,22), (2,4,33), (3,2,44), (3,3,55), (3,4,66)]";
    String expectCR = "[(1,1,11), (2,1,22), (0,2,77), (3,2,44), (3,3,55), (1,4,88), (2,4,33), (3,4,66), (0,5,99)]";
    String expectDR = "[(2,1,22), (3,2,44), (1,1,11), (3,3,55), (3,4,66), (0,2,77), (2,4,33), (1,4,88), (0,5,99)]";
    String expectAR = "[(1,1,11), (0,2,77), (2,1,22), (3,2,44), (1,4,88), (0,5,99), (3,3,55), (2,4,33), (3,4,66)]";
    checkInternalSequences(b,expectRC,expectCR,expectDR,expectAR);
  }
  @Test(timeout=1000) public void internal_sequences_04(){
    int fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(fill);
    int sets[][] = {
      {1,1, 11},
      {1,2, 22},
      {-1,-1,33},
      {6,1, 44},
      {3,1, 55},
      {2,2, 66},
      {4,5,77},
      {5,0,88},
      {5,4,99},
      {6,3,11},
      {7,2,22},
      {8,3,33},
      {0,9,44},
      {3,2,55},
      {6,6,66},
    };
    applySets(sets, b);
    String expectRC = "[(-1,-1,33), (0,9,44), (1,1,11), (1,2,22), (2,2,66), (3,1,55), (3,2,55), (4,5,77), (5,0,88), (5,4,99), (6,1,44), (6,3,11), (6,6,66), (7,2,22), (8,3,33)]";
    String expectCR = "[(-1,-1,33), (5,0,88), (1,1,11), (3,1,55), (6,1,44), (1,2,22), (2,2,66), (3,2,55), (7,2,22), (6,3,11), (8,3,33), (5,4,99), (4,5,77), (6,6,66), (0,9,44)]";
    String expectDR = "[(5,0,88), (6,1,44), (7,2,22), (8,3,33), (6,3,11), (3,1,55), (3,2,55), (5,4,99), (-1,-1,33), (1,1,11), (2,2,66), (6,6,66), (1,2,22), (4,5,77), (0,9,44)]";
    String expectAR = "[(-1,-1,33), (1,1,11), (1,2,22), (3,1,55), (2,2,66), (5,0,88), (3,2,55), (6,1,44), (7,2,22), (6,3,11), (5,4,99), (4,5,77), (0,9,44), (8,3,33), (6,6,66)]";
    checkInternalSequences(b,expectRC,expectCR,expectDR,expectAR);
  }
  @Test(timeout=1000) public void internal_sequences_05(){
    Integer fill = 0;
    SparseBoard<Integer> b = new SparseBoard<Integer>(fill);
    int sets[][] = {
      {-2,-4,  1},
      {-2,-3,  2},
      {-2,-2,  3},
      {-2,-1,  4},
      {-2,+0,  5},
      {-2,+1,  6},
      {-2,+2,  7},
      {-2,+3,  8},
      {-2,+4,  9},
      {-2,+5, 10},
      {-1,-4, 11},
      {-1,-3, 12},
      {-1,-2, 13},
      {-1,-1, 14},
      {-1,+0, 15},
      {-1,+1, 16},
      {-1,+2, 17},
      {-1,+3, 18},
      {-1,+4, 19},
      {-1,+5, 20},
      {+0,-4, 21},
      {+0,-3, 22},
      {+0,-2, 23},
      {+0,-1, 24},
      {+0,+0, 25},
      {+0,+1, 26},
      {+0,+2, 27},
      {+0,+3, 28},
      {+0,+4, 29},
      {+0,+5, 30},
      {+1,-4, 31},
      {+1,-3, 32},
      {+1,-2, 33},
      {+1,-1, 34},
      {+1,+0, 35},
      {+1,+1, 36},
      {+1,+2, 37},
      {+1,+3, 38},
      {+1,+4, 39},
      {+1,+5, 40},
      {+2,-4, 41},
      {+2,-3, 42},
      {+2,-2, 43},
      {+2,-1, 44},
      {+2,+0, 45},
      {+2,+1, 46},
      {+2,+2, 47},
      {+2,+3, 48},
      {+2,+4, 49},
      {+2,+5, 50},
      {+3,-4, 51},
      {+3,-3, 52},
      {+3,-2, 53},
      {+3,-1, 54},
      {+3,+0, 55},
      {+3,+1, 56},
      {+3,+2, 57},
      {+3,+3, 58},
      {+3,+4, 59},
      {+3,+5, 60},
      {+4,-4, 61},
      {+4,-3, 62},
      {+4,-2, 63},
      {+4,-1, 64},
      {+4,+0, 65},
      {+4,+1, 66},
      {+4,+2, 67},
      {+4,+3, 68},
      {+4,+4, 69},
      {+4,+5, 70},
      {+5,-4, 71},
      {+5,-3, 72},
      {+5,-2, 73},
      {+5,-1, 74},
      {+5,+0, 75},
      {+5,+1, 76},
      {+5,+2, 77},
      {+5,+3, 78},
      {+5,+4, 79},
      {+5,+5, 80},
      {+6,-4, 81},
      {+6,-3, 82},
      {+6,-2, 83},
      {+6,-1, 84},
      {+6,+0, 85},
      {+6,+1, 86},
      {+6,+2, 87},
      {+6,+3, 88},
      {+6,+4, 89},
      {+6,+5, 90},
      {+7,-4, 91},
      {+7,-3, 92},
      {+7,-2, 93},
      {+7,-1, 94},
      {+7,+0, 95},
      {+7,+1, 96},
      {+7,+2, 97},
      {+7,+3, 98},
      {+7,+4, 99},
      {+7,+5,100},
    };
    applySets(sets, b);
    String expectRC = "[(-2,-4,1), (-2,-3,2), (-2,-2,3), (-2,-1,4), (-2,0,5), (-2,1,6), (-2,2,7), (-2,3,8), (-2,4,9), (-2,5,10), (-1,-4,11), (-1,-3,12), (-1,-2,13), (-1,-1,14), (-1,0,15), (-1,1,16), (-1,2,17), (-1,3,18), (-1,4,19), (-1,5,20), (0,-4,21), (0,-3,22), (0,-2,23), (0,-1,24), (0,0,25), (0,1,26), (0,2,27), (0,3,28), (0,4,29), (0,5,30), (1,-4,31), (1,-3,32), (1,-2,33), (1,-1,34), (1,0,35), (1,1,36), (1,2,37), (1,3,38), (1,4,39), (1,5,40), (2,-4,41), (2,-3,42), (2,-2,43), (2,-1,44), (2,0,45), (2,1,46), (2,2,47), (2,3,48), (2,4,49), (2,5,50), (3,-4,51), (3,-3,52), (3,-2,53), (3,-1,54), (3,0,55), (3,1,56), (3,2,57), (3,3,58), (3,4,59), (3,5,60), (4,-4,61), (4,-3,62), (4,-2,63), (4,-1,64), (4,0,65), (4,1,66), (4,2,67), (4,3,68), (4,4,69), (4,5,70), (5,-4,71), (5,-3,72), (5,-2,73), (5,-1,74), (5,0,75), (5,1,76), (5,2,77), (5,3,78), (5,4,79), (5,5,80), (6,-4,81), (6,-3,82), (6,-2,83), (6,-1,84), (6,0,85), (6,1,86), (6,2,87), (6,3,88), (6,4,89), (6,5,90), (7,-4,91), (7,-3,92), (7,-2,93), (7,-1,94), (7,0,95), (7,1,96), (7,2,97), (7,3,98), (7,4,99), (7,5,100)]"; 
    String expectCR = "[(-2,-4,1), (-1,-4,11), (0,-4,21), (1,-4,31), (2,-4,41), (3,-4,51), (4,-4,61), (5,-4,71), (6,-4,81), (7,-4,91), (-2,-3,2), (-1,-3,12), (0,-3,22), (1,-3,32), (2,-3,42), (3,-3,52), (4,-3,62), (5,-3,72), (6,-3,82), (7,-3,92), (-2,-2,3), (-1,-2,13), (0,-2,23), (1,-2,33), (2,-2,43), (3,-2,53), (4,-2,63), (5,-2,73), (6,-2,83), (7,-2,93), (-2,-1,4), (-1,-1,14), (0,-1,24), (1,-1,34), (2,-1,44), (3,-1,54), (4,-1,64), (5,-1,74), (6,-1,84), (7,-1,94), (-2,0,5), (-1,0,15), (0,0,25), (1,0,35), (2,0,45), (3,0,55), (4,0,65), (5,0,75), (6,0,85), (7,0,95), (-2,1,6), (-1,1,16), (0,1,26), (1,1,36), (2,1,46), (3,1,56), (4,1,66), (5,1,76), (6,1,86), (7,1,96), (-2,2,7), (-1,2,17), (0,2,27), (1,2,37), (2,2,47), (3,2,57), (4,2,67), (5,2,77), (6,2,87), (7,2,97), (-2,3,8), (-1,3,18), (0,3,28), (1,3,38), (2,3,48), (3,3,58), (4,3,68), (5,3,78), (6,3,88), (7,3,98), (-2,4,9), (-1,4,19), (0,4,29), (1,4,39), (2,4,49), (3,4,59), (4,4,69), (5,4,79), (6,4,89), (7,4,99), (-2,5,10), (-1,5,20), (0,5,30), (1,5,40), (2,5,50), (3,5,60), (4,5,70), (5,5,80), (6,5,90), (7,5,100)]"; 
    String expectDR = "[(7,-4,91), (6,-4,81), (7,-3,92), (5,-4,71), (6,-3,82), (7,-2,93), (4,-4,61), (5,-3,72), (6,-2,83), (7,-1,94), (3,-4,51), (4,-3,62), (5,-2,73), (6,-1,84), (7,0,95), (2,-4,41), (3,-3,52), (4,-2,63), (5,-1,74), (6,0,85), (7,1,96), (1,-4,31), (2,-3,42), (3,-2,53), (4,-1,64), (5,0,75), (6,1,86), (7,2,97), (0,-4,21), (1,-3,32), (2,-2,43), (3,-1,54), (4,0,65), (5,1,76), (6,2,87), (7,3,98), (-1,-4,11), (0,-3,22), (1,-2,33), (2,-1,44), (3,0,55), (4,1,66), (5,2,77), (6,3,88), (7,4,99), (-2,-4,1), (-1,-3,12), (0,-2,23), (1,-1,34), (2,0,45), (3,1,56), (4,2,67), (5,3,78), (6,4,89), (7,5,100), (-2,-3,2), (-1,-2,13), (0,-1,24), (1,0,35), (2,1,46), (3,2,57), (4,3,68), (5,4,79), (6,5,90), (-2,-2,3), (-1,-1,14), (0,0,25), (1,1,36), (2,2,47), (3,3,58), (4,4,69), (5,5,80), (-2,-1,4), (-1,0,15), (0,1,26), (1,2,37), (2,3,48), (3,4,59), (4,5,70), (-2,0,5), (-1,1,16), (0,2,27), (1,3,38), (2,4,49), (3,5,60), (-2,1,6), (-1,2,17), (0,3,28), (1,4,39), (2,5,50), (-2,2,7), (-1,3,18), (0,4,29), (1,5,40), (-2,3,8), (-1,4,19), (0,5,30), (-2,4,9), (-1,5,20), (-2,5,10)]"; 
    String expectAR = "[(-2,-4,1), (-1,-4,11), (-2,-3,2), (0,-4,21), (-1,-3,12), (-2,-2,3), (1,-4,31), (0,-3,22), (-1,-2,13), (-2,-1,4), (2,-4,41), (1,-3,32), (0,-2,23), (-1,-1,14), (-2,0,5), (3,-4,51), (2,-3,42), (1,-2,33), (0,-1,24), (-1,0,15), (-2,1,6), (4,-4,61), (3,-3,52), (2,-2,43), (1,-1,34), (0,0,25), (-1,1,16), (-2,2,7), (5,-4,71), (4,-3,62), (3,-2,53), (2,-1,44), (1,0,35), (0,1,26), (-1,2,17), (-2,3,8), (6,-4,81), (5,-3,72), (4,-2,63), (3,-1,54), (2,0,45), (1,1,36), (0,2,27), (-1,3,18), (-2,4,9), (7,-4,91), (6,-3,82), (5,-2,73), (4,-1,64), (3,0,55), (2,1,46), (1,2,37), (0,3,28), (-1,4,19), (-2,5,10), (7,-3,92), (6,-2,83), (5,-1,74), (4,0,65), (3,1,56), (2,2,47), (1,3,38), (0,4,29), (-1,5,20), (7,-2,93), (6,-1,84), (5,0,75), (4,1,66), (3,2,57), (2,3,48), (1,4,39), (0,5,30), (7,-1,94), (6,0,85), (5,1,76), (4,2,67), (3,3,58), (2,4,49), (1,5,40), (7,0,95), (6,1,86), (5,2,77), (4,3,68), (3,4,59), (2,5,50), (7,1,96), (6,2,87), (5,3,78), (4,4,69), (3,5,60), (7,2,97), (6,3,88), (5,4,79), (4,5,70), (7,3,98), (6,4,89), (5,5,80), (7,4,99), (6,5,90), (7,5,100)]"; 
    checkInternalSequences(b,expectRC,expectCR,expectDR,expectAR);
  }




    

  // STRESS TESTS

  // Large sequence of moves
  @Test(timeout=1000) public void stress_01(){
    int rowMin=1, rowMax=+3, colMin=-1, colMax=0;
    int fill = 0;
    String expectB, expectLS;
    SparseBoard<Integer> b = new SparseBoard<Integer>(rowMin,rowMax,colMin,colMax,fill);
    int sets[][];
    sets = new int[][]{
      {1,1, 11},
      {1,2, 22},
      {1,3, 33},
      {1,0, 44},
    };
    applySets(sets, b);
    expectB =
      "    | -1|  0|  1|  2|  3|\n"+
      "    +---+---+---+---+---+\n"+
      "  1 |  0| 44| 11| 22| 33|\n"+
      "    +---+---+---+---+---+\n"+
      "  2 |  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      "  3 |  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+\n"+
      "";
    expectLS = "[(1,1,11)]";
    checkBoard(b,expectB,fill);    
    checkLongestSequence(b,expectLS);

    sets = new int[][]{
      {+0,-1, 11},
      {+2,+2, 22},
      {+3,+3, 33},
      {+1,-1, 44},
      {+0,+0, 11},
      {+3,+2, 22},
      {+2,+4, 33},
    };
    applySets(sets, b);

    expectB =
      "    | -1|  0|  1|  2|  3|  4|\n"+
      "    +---+---+---+---+---+---+\n"+
      "  0 | 11| 11|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      "  1 | 44| 44| 11| 22| 33|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      "  2 |  0|  0|  0| 22|  0| 33|\n"+
      "    +---+---+---+---+---+---+\n"+
      "  3 |  0|  0|  0| 22| 33|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      "";
    expectLS = "[(1,2,22), (2,2,22), (3,2,22)]";
    checkBoard(b,expectB,fill);    
    checkLongestSequence(b,expectLS);

    applyUndos(3, b);

    expectB =
      "    | -1|  0|  1|  2|  3|  4|\n"+
      "    +---+---+---+---+---+---+\n"+
      "  0 | 11|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      "  1 | 44| 44| 11| 22| 33|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      "  2 |  0|  0|  0| 22|  0|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      "  3 |  0|  0|  0|  0| 33|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      "";
    expectLS = "[(1,2,22), (2,2,22)]";
    checkBoard(b,expectB,fill);    
    checkLongestSequence(b,expectLS);

    applyRedos(2, b);

    expectB =
      "    | -1|  0|  1|  2|  3|  4|\n"+
      "    +---+---+---+---+---+---+\n"+
      "  0 | 11| 11|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      "  1 | 44| 44| 11| 22| 33|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      "  2 |  0|  0|  0| 22|  0|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      "  3 |  0|  0|  0| 22| 33|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      "";
    expectLS = "[(1,2,22), (2,2,22), (3,2,22)]";
    checkBoard(b,expectB,fill);    
    checkLongestSequence(b,expectLS);

    sets = new int[][]{
      {+0,+1, 44},
      {-1,-1, 11},
      {+0,+3, 22},
      {+2,+3, 33},
    };
    applySets(sets, b);

    expectB =
      "    | -1|  0|  1|  2|  3|  4|\n"+
      "    +---+---+---+---+---+---+\n"+
      " -1 | 11|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      "  0 | 11| 11| 44|  0| 22|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      "  1 | 44| 44| 11| 22| 33|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      "  2 |  0|  0|  0| 22| 33|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      "  3 |  0|  0|  0| 22| 33|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      "";
    expectLS = "[(1,2,22), (2,2,22), (3,2,22)]";
    checkBoard(b,expectB,fill);    
    checkLongestSequence(b,expectLS);

    sets = new int[][]{
      {-1,+2, 44},
      {-2,-2, 11},
      {+2,+1, 22},
      {+4,+3, 33},
      {+3,-2, 44},
      {-1,-0, 11},
    };
    applySets(sets, b);

    expectB =
      "    | -2| -1|  0|  1|  2|  3|  4|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      " -2 | 11|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      " -1 |  0| 11| 11|  0| 44|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  0 |  0| 11| 11| 44|  0| 22|  0|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  1 |  0| 44| 44| 11| 22| 33|  0|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  2 |  0|  0|  0| 22| 22| 33|  0|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  3 | 44|  0|  0|  0| 22| 33|  0|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  4 |  0|  0|  0|  0|  0| 33|  0|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "";
    expectLS = "[(-2,-2,11), (-1,-1,11), (0,0,11), (1,1,11)]";
    checkBoard(b,expectB,fill);    
    checkLongestSequence(b,expectLS);

    applyUndos(4, b);
    applyRedos(4, b);
    applyUndos(4, b);
    applyRedos(2, b);


    expectB =
      "    | -2| -1|  0|  1|  2|  3|  4|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      " -2 | 11|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      " -1 |  0| 11|  0|  0| 44|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  0 |  0| 11| 11| 44|  0| 22|  0|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  1 |  0| 44| 44| 11| 22| 33|  0|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  2 |  0|  0|  0| 22| 22| 33|  0|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  3 |  0|  0|  0|  0| 22| 33|  0|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  4 |  0|  0|  0|  0|  0| 33|  0|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "";
    expectLS = "[(-2,-2,11), (-1,-1,11), (0,0,11), (1,1,11)]";
    checkBoard(b,expectB,fill);    
    checkLongestSequence(b,expectLS);

    applyUndos(2, b);


    expectB =
      "    | -2| -1|  0|  1|  2|  3|  4|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      " -2 | 11|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      " -1 |  0| 11|  0|  0| 44|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  0 |  0| 11| 11| 44|  0| 22|  0|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  1 |  0| 44| 44| 11| 22| 33|  0|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  2 |  0|  0|  0|  0| 22| 33|  0|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  3 |  0|  0|  0|  0| 22| 33|  0|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  4 |  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "";
    expectLS = "[(-2,-2,11), (-1,-1,11), (0,0,11), (1,1,11)]";
    checkBoard(b,expectB,fill);    
    checkLongestSequence(b,expectLS);

    sets = new int[][]{
      {+2,-1, 44},
      {-1,-2, 11},
      {+0,+2, 22},
      {+5,+3, 33},
      {+3,-2, 44},
      
    };
    applySets(sets, b);

    expectB =
      "    | -2| -1|  0|  1|  2|  3|  4|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      " -2 | 11|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      " -1 | 11| 11|  0|  0| 44|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  0 |  0| 11| 11| 44| 22| 22|  0|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  1 |  0| 44| 44| 11| 22| 33|  0|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  2 |  0| 44|  0|  0| 22| 33|  0|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  3 | 44|  0|  0|  0| 22| 33|  0|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  4 |  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  5 |  0|  0|  0|  0|  0| 33|  0|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "";
    expectLS = "[(-1,2,44), (0,1,44), (1,0,44), (2,-1,44), (3,-2,44)]";
    checkBoard(b,expectB,fill);    
    checkLongestSequence(b,expectLS);

    sets = new int[][]{
      {+4,-3, 44},
      {+5,-4, 44},
    };
    applySets(sets, b);


    expectB =
      "    | -4| -3| -2| -1|  0|  1|  2|  3|  4|\n"+
      "    +---+---+---+---+---+---+---+---+---+\n"+
      " -2 |  0|  0| 11|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+\n"+
      " -1 |  0|  0| 11| 11|  0|  0| 44|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+\n"+
      "  0 |  0|  0|  0| 11| 11| 44| 22| 22|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+\n"+
      "  1 |  0|  0|  0| 44| 44| 11| 22| 33|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+\n"+
      "  2 |  0|  0|  0| 44|  0|  0| 22| 33|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+\n"+
      "  3 |  0|  0| 44|  0|  0|  0| 22| 33|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+\n"+
      "  4 |  0| 44|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+\n"+
      "  5 | 44|  0|  0|  0|  0|  0|  0| 33|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+\n"+
      "";
    expectLS = "[(-1,2,44), (0,1,44), (1,0,44), (2,-1,44), (3,-2,44), (4,-3,44), (5,-4,44)]";
    checkBoard(b,expectB,fill);    
    checkLongestSequence(b,expectLS);

    applyUndos(13, b);
    applyRedos(1, b);

    expectB =
      "    | -4| -3| -2| -1|  0|  1|  2|  3|  4|\n"+
      "    +---+---+---+---+---+---+---+---+---+\n"+
      " -2 |  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+\n"+
      " -1 |  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+\n"+
      "  0 |  0|  0|  0| 11| 11| 44|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+\n"+
      "  1 |  0|  0|  0| 44| 44| 11| 22| 33|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+\n"+
      "  2 |  0|  0|  0|  0|  0|  0| 22|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+\n"+
      "  3 |  0|  0|  0|  0|  0|  0| 22| 33|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+\n"+
      "  4 |  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+\n"+
      "  5 |  0|  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+---+\n"+
      "";
    expectLS = "[(1,2,22), (2,2,22), (3,2,22)]";
    checkBoard(b,expectB,fill);    
    checkLongestSequence(b,expectLS);

  }    

  @Test(timeout=1000) public void stress_02(){
    int fill = 0;
    String expectB, expectLS;
    SparseBoard<Integer> b = new SparseBoard<Integer>(fill);
    int sets[][];

    sets = new int[][]{
      {-1,1, 11},
      {1,2,  22},
      {1,-3, 11},
      {1,0,  22},
    };
    applySets(sets, b);

    expectB =
      "    | -3| -2| -1|  0|  1|  2|\n"+
      "    +---+---+---+---+---+---+\n"+
      " -1 |  0|  0|  0|  0| 11|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      "  0 |  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+\n"+
      "  1 | 11|  0|  0| 22|  0| 22|\n"+
      "    +---+---+---+---+---+---+\n"+
      "";
    expectLS = "[(-1,1,11)]";
    checkBoard(b,expectB,fill);    
    checkLongestSequence(b,expectLS);

    fill = 999;
    b.addRowBottom();
    b.setFillElem(fill);
    b.addColRight();

    expectB =
      "    | -3| -2| -1|  0|  1|  2|  3|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      " -1 |999|999|999|999| 11|999|999|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  0 |999|999|999|999|999|999|999|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  1 | 11|999|999| 22|999| 22|999|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "  2 |999|999|999|999|999|999|999|\n"+
      "    +---+---+---+---+---+---+---+\n"+
      "";
    expectLS = "[(-1,1,11)]";
    checkBoard(b,expectB,fill);    
    checkLongestSequence(b,expectLS);
    
    b.expandToInclude(-4,2);
    fill = -99;
    b.setFillElem(fill);
    sets = new int[][]{
      {2,2, 11},
      {-2,4,  22},
      {2,-3, 11},
      {3,3,  22},
    };
    applySets(sets, b);
    
    expectB =
      "    | -3| -2| -1|  0|  1|  2|  3|  4|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      " -4 |-99|-99|-99|-99|-99|-99|-99|-99|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      " -3 |-99|-99|-99|-99|-99|-99|-99|-99|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      " -2 |-99|-99|-99|-99|-99|-99|-99| 22|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      " -1 |-99|-99|-99|-99| 11|-99|-99|-99|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  0 |-99|-99|-99|-99|-99|-99|-99|-99|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  1 | 11|-99|-99| 22|-99| 22|-99|-99|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  2 | 11|-99|-99|-99|-99| 11|-99|-99|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  3 |-99|-99|-99|-99|-99|-99| 22|-99|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "";
    expectLS = "[(1,-3,11), (2,-3,11)]";
    checkBoard(b,expectB,fill);    
    checkLongestSequence(b,expectLS);

    sets = new int[][]{
      {1,1,  22},
      {3,-3,  11},
      {3,4,  22},
    };
    applySets(sets, b);
    fill = 0;
    b.setFillElem(fill);
    applyUndos(4, b);
    applyRedos(2, b);

    expectB =
      "    | -3| -2| -1|  0|  1|  2|  3|  4|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      " -4 |  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      " -3 |  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      " -2 |  0|  0|  0|  0|  0|  0|  0| 22|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      " -1 |  0|  0|  0|  0| 11|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  0 |  0|  0|  0|  0|  0|  0|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  1 | 11|  0|  0| 22| 22| 22|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  2 | 11|  0|  0|  0|  0| 11|  0|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "  3 |  0|  0|  0|  0|  0|  0| 22|  0|\n"+
      "    +---+---+---+---+---+---+---+---+\n"+
      "";
    expectLS = "[(1,0,22), (1,1,22), (1,2,22)]";
    checkBoard(b,expectB,fill);    
    checkLongestSequence(b,expectLS);
  }

}


